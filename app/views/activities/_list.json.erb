<% @item = Activity.new %>
{
 success: true,
 items: [
 {
  xtype: 'container',
  <% unless on_open_tab_id.nil? %>
  	id: <%= raw on_open_tab_id.to_json -%>,
  <% end %>
  closable: true,
  title: <%= raw "Activity [#{filtered_type}]".to_json -%>,
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},  	

  items: [
       
   // grid con righe import
		 {
				flex: 1,
				layout: 'fit',
        	    tools: [
                ],
        	    xtype: 'gridpanel',
				autoScroll: true,  
				scroll: true,      	    
        	    store: new Ext.data.Store({
        	    	autoLoad: true,
        	    	fields: [],
        	    	proxy: {
        	            url: <%= raw  (root_path + 'activities/get_row_by_filtered_type').to_json -%>,
        	            extraParams: {
        	            	filtered_type: <%= raw filtered_type.to_json -%>,
        	            	form_user: {}
        	            },
        	            reader: {
        	                type: 'json',
							method: 'POST',        	                
        	                rootProperty: 'items'
        	            },
        	            paramsAsJson: true,
						method: 'POST',
						type: 'ajax',
			
						//Add these two properties
						actionMethods: {
							read: 'POST'
						},        	            
        	            
        	        }
        	    }),
        	   
 		        	   
        	           	   
        	   dockedItems: [
        	   { 
        	    xtype: 'toolbar', dock: 'top', itemId: 'toptoolbar',
        	    items: [
        	    '->', {
				    xtype: 'form',	
				    height: 50,
				    layout: {
					    type: 'hbox',
					    pack: 'start',
					    align: 'stretch'
					},
				    padding: '10 10 10 10',
				    
				    defaults: {
				    	xtype: 'textfield',
				    	labelAlign: 'right',
				    	width: 150, labelWidth: 70, padding: '0 0 0 10',
				    	fieldStyle: 'font-size: 16px; text-transform: uppercase;',
		                enableKeyEvents: true,
		                listeners: {                   
			                'keypress': function(field,event){
			                    if (event.getKey() == event.ENTER){
			                        this.up('form').start_refresh();
			                    }
			                }                                   
			            }
			        },
			        
			        start_refresh: function() {
			                    header_form = this.up('grid').getDockedComponent('toptoolbar').down('form').getForm();
			                    header_form_values = header_form.getValues();

				    			this.up('grid').store.proxy.extraParams.form_user = header_form_values;				 				 
				 				this.up('grid').getStore().load();			        
			        },

				    items: [
				    
				       {	
								xtype: 'datefield',
								width: 200, labelWidth: 80, padding: '0 0 0 10',
				                fieldLabel: 'Da data', name: 'flt_date_from'
				 		}, {	
								xtype: 'datefield',
								width: 200, labelWidth: 80, padding: '0 0 0 10',
				                fieldLabel: 'A data', name: 'flt_date_to'
				 		}
				 		
				 		
				 		
				 		, <%= raw extjs_std_combo_model('customer', @item, {input_name: 'flt_customer_id'}, {width: 270, autoWidth: false}) -%>
				 		
				 		
				    
					/*				    
						{									
								xtype: 'label', width: 100, labelWidth: 120, padding: '0 0 0 10',
				                text: 'Ricerca per: '
				 		}
				 						 	
				 		, {	
								width: 200, labelWidth: 120, padding: '0 0 0 10',
				                fieldLabel: 'Container', name: 'flt_num_container'
				 		}, {	
				                fieldLabel: 'Autista', name: 'flt_driver'
				 		}, {	
				                fieldLabel: 'Targa', name: 'flt_plate'
				 		}, {	
				                fieldLabel: 'Rimorchio', name: 'flt_plate_trailer'
				 		}
				 	*/	
				 		
				    ]
				 }
				 
				 ,  {iconCls: 'fa fa-refresh fa-2x', text: 'Refresh', scale: 'large', 
				 			handler: function(event, toolEl, panel){ 
			                    header_form = this.up('grid').getDockedComponent('toptoolbar').down('form').getForm();
			                    header_form_values = header_form.getValues();

				    			this.up('grid').store.proxy.extraParams.form_user = header_form_values;				 				 
				 				this.up('grid').getStore().load();
				 			}
				 	}
				 ]
			  }
			],
        	           	    
        	    
			    columns: [{
			        dataIndex: 'container_number',
			        text: '',
			        width: 30,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h5>' + (rowIndex + 1) + '</h5>';
			        }			        
			    }, {
			        dataIndex: 'customer_id',
			        text: 'Cliente',
			        width: 200,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '<h3>' + rec.get('customer').name + '</h3>';
			         
			         ret += '<p>';			         
				         if (!Ext.isEmpty(rec.get('shipowner')))
				           ret += rec.get('shipowner').name;
				          
				          if (!Ext.isEmpty(rec.get('created_user_name')))
				          	ret += '<br><font size=1>[' + rec.get('created_user_name') + ']</font>';
			         
			         ret += '</p>'; 	
			          	 
			          return ret;			         
			        }			        
			    }
			    
			    
			    , {
			        dataIndex: 'notes',
			        text: 'Note',
			        flex: 1,
			        renderer: function (value, metaData, rec) {
			        	ret = '';
			        	
			        	if (rec.get('status') == 'ANN')
			        	  ret += '<h2><font color=red>Richiesta annullata</font></h2>';
			        	
			        	if (Ext.isEmpty(rec.get('activity_op_id')) == false)
			        		ret += '<span style="font-weight: bold;">[ ' + rec.data.activity_op.name + ' ]</span>';
			        	if (Ext.isEmpty(value) == false)
		                	ret += '<div style="white-space:normal">' + value.replace(/(?:\r\n|\r|\n)/g, '<br />'); + '</div>';
		                
		                if (!Ext.isEmpty(rec.get('activity_type')) &&
			        	     rec.get('activity_type').code == 'CUST_INSPECTION'){
			        	     ret += '<br/>[' + rec.get('quantity') +', ' + rec.get('booking_number') + ', ' + rec.get('terminal').code + ']';			        	     
			        	     			        	     
			        	     Ext.each(rec.get('activity_dett_containers'), function(dett_container) {			        	     	
								ret += '<br/>&nbsp;- ' + dett_container.container_number;
								if (dett_container.status == 'ANN')
								  ret += ' [ANN]';
								  
								if (!Ext.isEmpty(dett_container.make_available_at))
								  ret += ' [Dis]';
								if (!Ext.isEmpty(dett_container.execution_at))
								  ret += ' [Ese]';
								if (!Ext.isEmpty(dett_container.confirmed_at))
								  ret += ' [Con]';								  
																													
							}, this)
			        	    
			        	   ret += '<br/>&nbsp;<br/>';  
			        	}
		                
		                return ret;
		             }
			    }, {
			        text: 'Data',
			        width: 170,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '';
			         ret += '<table class=import_item_detail>';			         
					 ret += '<tr><th>Regis.</th><td class=normal>' + Ext.util.Format.date(rec.get('created_at'), 'd-m-y') + '</td></tr>';			         
					 ret += '<tr><th>Scad.</th><td>' + Ext.util.Format.date(rec.get('expiration_date'), 'd-m-y') + '</td></tr>';
					 ret += '<tr><th>Eseg.</th><td class=ok>' + Ext.util.Format.date(rec.get('execution_date'), 'd-m-y') + '</td></tr>';
			         ret += '</table>';
			         return ret;
			        }			        	        
			    }			        	        

			, {
			        text: 'Req.', tooltip: 'Richiesa ricevuta',
			        width: 60, dataIndex: 'request_received',
			        xtype: 'numbercolumn',
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	if (value == 1)
			        		return '<i class="fa fa-check fa-1x"></i>';
			        	return '';
					}
			    }


			, {
			        text: 'Container', tooltip: 'Dettaglio richiesta',
			        width: 100, dataIndex: 'request_received',
			        xtype: 'numbercolumn',
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			        			        			        
			        	var loc_grid = this;
			        	
			        	if (Ext.isEmpty(rec.get('activity_type'))) return '';
			        	if (rec.get('activity_type').code != 'CUST_INSPECTION') return '';
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            			          
			                ok_img = 'fa-truck';
			                var set_external = true;
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                				                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
								//cls: btn_cls,								
		                		scale: 'medium',			                    
			                        handler: function(button, b, c, d, e) {
			                        
				                		acs_show_panel_std(myApp, '<%= url_for(:controller=>'custom_inspections', :action=>'activity_dett') -%>', {rec_id: rec.get('id')}, 'Dettagli');	                             
			                           	                             
			                           	return false;

			                        }, scope: rec //handler

			                }); //button ok
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			    }


			    
				, {
			        text: 'Chiudi', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			        			        			        
			        	var loc_grid = this;
			        	
			        	//if (rec.get('weigh_status') == 'CLOSE') return '';
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            			          
			                ok_img = 'fa-check-square-o';
			                var set_external = true;
		                	btn_cls = 'btn-used';
		                	if (Ext.isEmpty(rec.get('execution_date')) == true)
		                	 btn_cls = 'btn-ok';
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                				                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
								cls: btn_cls,								
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();
				                			                             
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                             
           								loc_form = Ext.create('Ext.form.Panel', {
											    title: '',
											    frame: true,
											    bodyPadding: 10,
											    defaultType: 'textfield',
											    	layout: {
													    type: 'vbox',
													    align : 'stretch',
													    pack  : 'start',
													},
											    items: [
											        {xtype: 'hiddenfield',   name: 'id', value: rec.get('id')},
											        {xtype: 'textareafield', name: 'execution_notes', allowBlank: true, fieldLabel: 'Note di chiusura', labelAlign: 'top', value: rec.get('execution_notes')},
											        {xtype: 'datefield',     name: 'execution_date',  allowBlank: true, fieldLabel: 'Data chiusura', labelAlign: 'top', value: rec.get('execution_date')}
											        											      
											      										    										    										    
											    ]
											    ,
								    			dockedItems: [{
												    xtype: 'toolbar',
												    dock: 'right',
												    width: 135,
													defaults: {
												        xtype: 'button', scale: 'medium', textAlign: 'left'
									                },			    
												    margin: '5 5 5 5',
											    
											     	items:
												        [{
												            text: 'Conferma',
												            scale: 'large', cls: 'btn-confirm',
												            handler: function (btn, evt) {
												                           
												             form = this.up('form').getForm();
												             tmp_win  = this.up('window');
												             if (form.isValid()) {
												                btn.disable();
												                
																	  Ext.Ajax.request({
														                    url: <%= raw url_for(:controller=>'activities', :action=>'set_execution').to_json -%>,
														                    waitMsg: 'Salvataggio in corso....',
																			method:'POST',                    
														                    jsonData: {data: form.getValues()},	
														             	
																			success: function(result, request) {					
																				var returnData = Ext.JSON.decode(result.responseText);
																				
																				//error
																				if (returnData.success == false){
																					Ext.MessageBox.show({
																                        title: 'EXCEPTION',
																                        msg: returnData.message,
																                        icon: Ext.MessageBox.ERROR,
																                        buttons: Ext.Msg.OK
															                    	})
															                      return false;										
																				}								
																 							
																 				//ok
																 				  tmp_win.close();
																 				  loc_grid.store.load();
																 							
																			}, scope: this,
																			
																			failure: function(rec, op) {
																				var result = Ext.JSON.decode(op.getResponse().responseText);
																				Ext.MessageBox.show({
															                        title: 'EXCEPTION',
															                        msg: result.message,
															                        //icon: Ext.MessageBox.ERROR,
															                        buttons: Ext.Msg.OK
														                    	})					
																			}, scope: this,						
																							 
																    	});	    											                    
											                    
											                    return false;
												             }
												            }
												          }, 
												          
												          {
												            text: 'Chiudi',												            
												            scale: 'large',
												            handler: function (btn, evt) {
												            	tmp_win  = this.up('window');
												            	tmp_win.close();
												            }
												          }
												          
												          
												          /*
												          , {xtype: 'tbfill'}, {
												            text: '<i class="fa fa-truck fa-2x"></i> Pesa',												            
												            scale: 'medium',
												            handler: function (btn, evt) {
												            	this.up('form').render_form(false)
												            }
												          }, {
												            text: '<i class="fa fa-user fa-2x"></i> Da autista',												            
												            scale: 'medium',
												            handler: function (btn, evt) {
												            	this.up('form').render_form(true)
												            }
												          }
												          */
												          
												          
												         ]
	  												}] 
	  												
	  											
   												
   												
   														  												
											});		
											
				                           loc_win = Ext.create('Ext.window.Window',{
											    layout: 'fit',
											    items: loc_form,
											    title: 'Registra esecuzione attivit&agrave;',
											    width: 500,
											    height: 350,
											    id: 'myWindow'
											}).show();
														                             
			                           	return false;

			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }

<% if User.current.admin_can?(:activity, :amount) %>
			 , {
			        dataIndex: 'amount',
			        text: 'Importo',
			        width: 80, align: 'right',
			        renderer: function (value, metaData) {
		                 return Ext.util.Format.number(value, "0,000.00");
		             }
			    }
			    
			    
			    
			    
				, {
			        text: 'Imposta', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			        			        			        
			        	var loc_grid = this;
			        	
			        	//if (rec.get('weigh_status') == 'CLOSE') return '';
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            			          
			                ok_img = 'fa-eur';
			                var set_external = true;
			                var btn_cls = 'btn-warning';
			                
		                	set_external = false;
		                	btn_cls = 'btn-ok';
		                	if (rec.get('amount_setted') == true)
		                	 btn_cls = 'btn-used';
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                				                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
								cls: btn_cls,								
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();
			                        	
			                        	
			                        	//se ho i dettagli container, il prezzo lo imposto da li
			        					if (!Ext.isEmpty(rec.get('activity_type')) &&
			        						rec.get('activity_type').code == 'CUST_INSPECTION'){
												acs_show_win_std('Dettagli attivit&agrave;', 
														'<%= url_for(:controller=>'custom_inspections', :action=>'activity_dett') -%>', 
														{rec_id: rec.get('id'), set_amount: true}, 800, 500, {
															afterSave: function(from_win){
																from_win.destroy();
																loc_grid.store.load();
															}
														}, null, 'Y');
			        						return false;
			        					}
			                        	
			                        	
			                        	
			                        	
			                        	
				                			                             
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                              
			                             
           								loc_form = Ext.create('Ext.form.Panel', {
											    title: '',
											    frame: true,
											    bodyPadding: 10,
											    defaultType: 'textfield',
											    	layout: {
													    type: 'vbox',
													    align : 'stretch',
													    pack  : 'start',
													},
											    items: [
											        {xtype: 'hiddenfield', name: 'id', value: rec.get('id')},
											        
											        {xtype: 'checkbox', hidden: true, 
											        		name: 'recalculate_gest_price', 
											        		value: rec.get('amount_setted') == true ? rec.get('recalculate_gest_price') : rec.get('activity_op').recalculate_gest_price, 
											        		fieldLabel: 'Usa prezzo da listino gestionale',
											        		inputValue: true, uncheckedValue: false,
											        		listeners: {
											        			change: function(f){
											        				var form = f.up('form').getForm();
											        				if (f.getValue() == true)
											        					form.findField('amount').disable();
											        				if (f.getValue() == false)
											        					form.findField('amount').enable();
											        					
											        			}
											        		}
											        },
											        
											        {xtype: 'numberfield', disabled: true,   
											        		name: 'amount', allowBlank: false, fieldLabel: 'Importo', labelAlign: 'left', 
											        		value: rec.get('amount'),
											         listeners: {
											          specialkey: function(field, e){
											          	if (e.getKey() == e.ENTER) { 											          	  
											    		  var m_form = field.up('form');
											    		  if (m_form.isValid()){
											    		    var b = field.up('form').down('button[submit_on_click=true]');
    		  												b.handler.call(b, b, null);
											    		  }
												    	}
											          }
											         }
											        }
											     
											     	   											      
											      										    										    										    
											    ]
											    
											    , listeners: {
											     		afterrender: function(comp){
											     		
											     			//in base a recalculate_gest_price abilito/disabilito il prezzo
											     		
											     			if (rec.get('amount_setted') == true){
											     				//prezzo gia' impostato
											     				if (rec.get('activity_op').recalculate_gest_price || rec.get('recalculate_gest_price'))
											     					comp.getForm().findField('recalculate_gest_price').show();
											     				if (!rec.get('recalculate_gest_price'))
											     					comp.getForm().findField('amount').enable();	
											     			} else {
											     				//apertura per caricamento
												     			if (rec.get('activity_op').recalculate_gest_price == true){
												     				comp.getForm().findField('recalculate_gest_price').show();
												     			} else {
												     				comp.getForm().findField('amount').enable();
												     			}
											     			}
											     		
											     			
											     		}
											     	}
											    ,
								    			dockedItems: [{
												    xtype: 'toolbar',
												    dock: 'right',
												    width: 135,
													defaults: {
												        xtype: 'button', scale: 'medium', textAlign: 'left'
									                },			    
												    margin: '5 5 5 5',
											    
											     	items:
												        [{
												            text: 'Conferma',
												            submit_on_click: true,
												            scale: 'large', cls: 'btn-confirm',
												            handler: function (btn, evt) {
												                           
												             form = this.up('form').getForm();
												             tmp_win  = this.up('window');
												             if (form.isValid()) {
												                btn.disable();
												                
																	  Ext.Ajax.request({
														                    url: <%= raw url_for(:controller=>'activities', :action=>'set_amount').to_json -%>,
														                    waitMsg: 'Salvataggio in corso....',
																			method:'POST',                    
														                    jsonData: {data: form.getValues()},	
														             	
																			success: function(result, request) {					
																				var returnData = Ext.JSON.decode(result.responseText);
																				
																				//error
																				if (returnData.success == false){
																					Ext.MessageBox.show({
																                        title: 'EXCEPTION',
																                        msg: returnData.message,
																                        icon: Ext.MessageBox.ERROR,
																                        buttons: Ext.Msg.OK
															                    	})
															                      return false;										
																				}								
																 							
																 				//ok
																 				  tmp_win.close();
																 				  loc_grid.store.load();
																 							
																			}, scope: this,
																			
																			failure: function(rec, op) {
																				var result = Ext.JSON.decode(op.getResponse().responseText);
																				Ext.MessageBox.show({
															                        title: 'EXCEPTION',
															                        msg: result.message,
															                        //icon: Ext.MessageBox.ERROR,
															                        buttons: Ext.Msg.OK
														                    	})					
																			}, scope: this,						
																							 
																    	});	    											                    
											                    
											                    return false;
												             }
												            }
												          }, 
												          
												          {
												            text: 'Chiudi',												            
												            scale: 'large',
												            handler: function (btn, evt) {
												            	tmp_win  = this.up('window');
												            	tmp_win.close();
												            }
												          }
												          
												         ]
	  												}] 
	  												
	  											
   												
   												
   														  												
											});		
											
				                           loc_win = Ext.create('Ext.window.Window',{
											    layout: 'fit',
											    items: loc_form,
											    title: 'Imposta prezzo',
											    width: 500,
											    height: 350,
											    id: 'myWindow'
											}).show();
											
											
											setTimeout(function() {
												loc_win.focus();
												loc_win.down('form').getForm().findField('amount').focus();										
												loc_win.down('form').getForm().findField('amount').focus();
											}, 1);
														                             
			                           	return false;

			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     } //imposta
			     
			     
			   , {
			       //se impostato posso applicare prezzo di default (da activity_op)
			        text: 'Applica def.', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			        			        			        
			        	var loc_grid = this;
			        	
			        	//per ora lo disabilito sempre (ToDo: finire gestione con amount_setted)
			        	
			        	if (!Ext.isEmpty(rec.get('amount'))) return '';
			        	if (Ext.isEmpty(rec.get('activity_op').default_price) || rec.get('activity_op').default_price == 0) return '';
			        	
			        	if (!Ext.isEmpty(rec.get('activity_type')) && rec.get('activity_type').code == 'CUST_INSPECTION') return '';
			        	
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            			          		                	
		                    var btn_cls = 'btn-ok';
			            
			                var buttonOK = Ext.create('Ext.button.Button', {			                				                
								text: '&euro; ' + Ext.util.Format.number(rec.get('activity_op').default_price, "0,000"),
								cls: btn_cls,								
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        //disabilito per prevenire doppia esecuizione
			                       	button.disable();
			                       	
									Ext.MessageBox.confirm('Richieta conferma', 'Confermi il prezzo di default per l\'attivit&agrave; selezionata?', function(btn){												
										if(btn === 'yes'){
											Ext.Ajax.request({
							                    url: <%= raw url_for(:controller=>'activities', :action=>'exe_set_default_price').to_json -%>,
							                    waitMsg: 'Elaborazione in corso....',
												method:'POST',                     
							                    jsonData: {rec_id: rec.get('id')},	
							             	
												success: function(result, request) {
														var returnData = Ext.JSON.decode(result.responseText);
														if (returnData.success == false){
															Ext.MessageBox.show({
										                        title: 'EXCEPTION',
										                        msg: returnData.message,
										                        icon: Ext.MessageBox.ERROR,
										                        buttons: Ext.Msg.OK
									                    	})
									                      return false;										
														}																							
												
													loc_grid.store.load();																						 						
												}, scope: this,
												
												failure: function(rec, op) {
													Ext.MessageBox.show({
								                        title: 'EXCEPTION',
								                        msg: 'Errore',
								                        icon: Ext.MessageBox.ERROR,
								                        buttons: Ext.Msg.OK
							                    	})					
												}, scope: this,						
																 
									    	});												
										}
									});			                       	
			                       	
														                             
			                        return false;
			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }			   
			   } //applica prezzo proposto di default
			    
			    
<% end %>			    

			    
			    
			          
        ], //columns
			    
			    
				get_cls_button(rec){				
		        	cls_button = 'btn-warning';
		        	if (Ext.isEmpty(rec.get('estimate_authorized_at')) == false)
		        		cls_button = 'btn-ok';				
				
					return cls_button;
				},
			    
			    listeners: {
	                	itemcontextmenu : function(item, record, index, e, eOpts){
	                		eOpts.stopEvent();
                            var xy = eOpts.getXY();	                	
                            new Ext.menu.Menu({
                                items : [
                                         {
                                            text : '<i class="fa fa-edit fa-1x"> Modifica</i>',                                                                                                        
                                            handler: function(){
									     	 	new_win = acs_show_win_std('Modifica', <%= raw url_for(:controller=>'activities', 
									     	 				:action=>'modify_record').to_json -%>,
									     	 				{rec_id: record.get('id'), from_grid_id: this.id}, 800, 400);										                                                    
                                            }, scope: this
                                          }
                                          
<% if User.current.admin_can?(:activity, :amount) %>                                          
                                          , {
                                            text : '<i class="fa fa-trash-o fa-1x"> Elimina</i>',                                                                                                        
                                            handler: function(){
                                            
                                            	tmp_grid = this;									     	 	

												Ext.MessageBox.confirm('Richieta conferma', 'Eliminare l\'attivit&agrave; corrente?', function(btn){
												
													if(btn === 'yes'){
													
														Ext.Ajax.request({
										                    url: <%= raw url_for(:controller=>'activities', :action=>'exe_delete_activity').to_json -%>,
										                    waitMsg: 'Eliminazione in corso....',
															method:'POST',                     
										                    jsonData: {rec_id: record.get('id')},	
										             	
															success: function(result, request) {
																	var returnData = Ext.JSON.decode(result.responseText);
																	if (returnData.success == false){
																		Ext.MessageBox.show({
													                        title: 'EXCEPTION',
													                        msg: returnData.message,
													                        icon: Ext.MessageBox.ERROR,
													                        buttons: Ext.Msg.OK
												                    	})
												                      return false;										
																	}																							
															
																tmp_grid.store.load();																						 						
															}, scope: this,
															
															failure: function(rec, op) {
																var result = Ext.JSON.decode(op.getResponse().responseText);
																Ext.MessageBox.show({
											                        title: 'EXCEPTION',
											                        msg: result.message,
											                        icon: Ext.MessageBox.ERROR,
											                        buttons: Ext.Msg.OK
										                    	})					
															}, scope: this,						
																			 
												    	});													
													
													} //yes
													
												}); //confirm


										                                                    
                                            }, scope: this
                                          }
<% end %>                                          
                                          
                                          
                                         ]
                               }).showAt(xy);
	                	
	                	}			    					    
					}

				    

                        	    
        	}    
   
   
   
  ]
 }
 ]
}
