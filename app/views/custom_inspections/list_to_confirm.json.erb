{
 success: true,
 items: [
 {
  xtype: 'container',
  closable: true,
  title: 'Dett.Container',
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},
	
  	viewModel: {
			data: {
			}	
	},  	

  items: [
       
   // grid con righe import
		 {
				flex: 1,
				layout: 'fit',
        	    title: 'Elenco richieste in attesa', flex: 50,
        	    tools: [
                ],
        	    xtype: 'gridpanel',
        	    
        	    
        	    
				dockedItems: [
		        	   { 
		        	    xtype: 'toolbar', dock: 'top', itemId: 'toptoolbar',
		        	    items: [
		        	    
						  {
						    xtype: 'form', height: 30,
						    layout: {
							    type: 'hbox',
							    pack: 'start',
							    align: 'stretch'
							},
						    items: [
						    	{	
										xtype: 'textfield',
						                fieldLabel: 'Container',
						                name: 'flt_num_container'
						      	}
						    ]
						 }		        	    
		        	    
		        	     , '->',
		        	    	{iconCls: 'fa fa-filter fa-2x', text: 'Tutte', scale: 'large', 
						 		handler: function(event, toolEl, panel){ 
				 						acs_show_panel_std(myApp, '<%= url_for(:controller=>'custom_inspections', :action=>'list_all') -%>', {}, 'ALL');	                             			                           	                             
			                           	return false;
						 			}
						 		},		        	     
		        	    	{iconCls: 'fa fa-refresh fa-2x', text: 'Refresh', scale: 'large', 
						 		handler: function(event, toolEl, panel){ 
				 						var loc_grid = this.up('grid');
		 								var header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
		 								loc_grid.getStore().proxy.extraParams.f_values = header_form.getValues(); 						 						
				 						loc_grid.getStore().load();
						 			}
						 		}
						 ]
					  }
					],        	    
        	    		        		        
				autoScroll: true,  
				scroll: true,      	    
        	    store: new Ext.data.Store({
        	    	autoLoad: true,
        	    	fields: [],
        	    	proxy: {
        	            url: <%= raw  (root_path + 'custom_inspections/list_to_confirm_data').to_json -%>,
        	            extraParams: {
        	            },
        	            reader: {
        	                type: 'json',
							method: 'POST',        	                
        	                rootProperty: 'items'
        	            },
        	            paramsAsJson: true,
						method: 'POST',
						type: 'ajax',
			
						//Add these two properties
						actionMethods: {
							read: 'POST'
						},        	            
        	            
        	        }
        	        
        	    }),
        	   
 		        	   
        	           	   
        	           	    
        	    
			    columns: [{
			        dataIndex: 'container_number',
			        text: 'Seq',
			        width: 50,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h5>' + (rowIndex + 1) + '</h5>';
			        }			        
			    }, {
			        dataIndex: 'container_number',
			        text: 'Container',
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '<h1>' + rec.get('container_number') + '</h1>';
			         
			         if (!Ext.isEmpty(rec.get('creation_notes')))
			           ret += '<p>' + rec.get('creation_notes') + '</p>';
			         
			         ret += '<p>';
			         ret += rec.data.activity.shipowner.name;
			         
					  if (!Ext.isEmpty(rec.get('activity').created_user_name))
					  	ret += '<br><font size=1>[' + rec.get('activity').created_user_name + '</font>]';

			         ret += '</p>';
			         return ret;			         
			        }			        
			    }
			    				    
				, {	
			        dataIndex: 'container_number',
			        text: 'Dettagli',
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			         
			           ret = '';
			           ret = '<h3>' + rec.data.activity.activity_op.name + '</h3>';
			           ret += '<h3>' + rec.data.activity.customer.name + '</3>';			           
			           
			           return ret;
			         			         			        
			        }			        	        
			    }	


			    , {
			        dataIndex: 'container_number',
			        text: 'Da effetturare il',
			        width: 150, align: 'center',
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         var me = this; //me = grid;			          			         
			           ret = '<h3>' + Ext.util.Format.date(rec.get('activity').expiration_date, 'd/m/y') + '</h3>';
			           
			           if (rec.get('activity').to_be_made_available == true){
			           	if (!Ext.isEmpty(rec.get('make_available_at')))
			           		ret += '<p>Messa a disposizione<br/> il ' + Ext.util.Format.date(rec.get('make_available_at'), 'd/m/y H.i') + '</p>';
			           	else
			           		ret += '<p>Messa a disposizione<br/>non ancora eseguita</p>';
			           }
			           
			           if (!Ext.isEmpty(rec.get('dra_out')))
			           		ret += '<p>' + rec.get('dra_out') + '</p>';
			           
			           return ret;
			        }			        
			    }

			    
			    , {
			        dataIndex: 'container_number',
			        text: 'Visita eseguita',
			        width: 150, align: 'center',
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         var me = this; //me = grid;			          
			         if (!Ext.isEmpty(rec.get('execution_at'))){
			           ret = '<h3 style="color: green;">' + Ext.util.Format.date(rec.get('execution_at'), 'd/m/y H:i') + '</h3>';
			           return ret;
			         } else {
			           var b_id = Ext.id();
					   setTimeout(function(){me.b_postpones.call(me, b_id, rec);}, 1);
			           var b_id_ann = Ext.id();
					   setTimeout(function(){me.b_ann.call(me, b_id_ann, rec);}, 1);					   
					   return '<div id="' + b_id + '"></div>' + '<div id="' + b_id_ann + '"></div>';			         
			         }
			        }			        
			    }
			    		    
			    			    
			    , {
			        dataIndex: 'container_number',
			        text: 'Conferma',
			        width: 150, align: 'center',
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         var me = this; //me = grid;			          			           
			           var b_id = Ext.id();
					   setTimeout(function(){me.b_set_execute.call(me, b_id, rec);}, 1);
					   return '<div id="' + b_id + '"></div>';			              			         
			        }			        
			    }
        ] //columns
               
      
    , b_set_execute: function(b_id, rec){
        var me = this; //grid
        var b = Ext.create('Ext.button.Button', {
        	text: 'Conferma<br/>avvenuta visita',
        	scale: 'large',
        	handler: function(){
        		//verifico esistenza container in medaT e in base a questo avro' nella form di conferma il sigillo o meno        	
        		std_ajax_request.call(me, <%= raw url_for(:controller=>'custom_inspections', :action=>'verify_container_exists').to_json -%>, {data: rec.data}, 'exe_open_set_execute', {rec: rec});
        	}
        });
		if (Ext.get(b_id)) {b.render(Ext.get(b_id));}      
      } //b_set      
      



    , exe_open_set_execute: function(returnData, stdAjaxParams){
        var me = this, //grid
        	rec = stdAjaxParams.rec;        	        
        
        if (!Ext.isEmpty(returnData.item)){ 
            	<%= raw confirm_with_note(url_for(:controller=>'custom_inspections', :action=>'exe_customer_confirmation'), "
							{
			            		afterSave: function(fromWin){
			            		    fromWin.destroy();
			            			me.store.load();
			            		}            	            	
			            	}            	
            	", 'id', false, [
            		{xtype: 'textfield', name: 'nuovo_sigillo', fieldLabel: 'Nuovo sigillo applicato', width: '100%', labelAlign: 'top', msgTarget: 'under', allowBlank: false}.to_json
            	]) %>
        } else {
            	<%= raw confirm_with_note(url_for(:controller=>'custom_inspections', :action=>'exe_customer_confirmation'), "
							{
			            		afterSave: function(fromWin){
			            		    fromWin.destroy();
			            			me.store.load();
			            		}            	            	
			            	}            	
            	", 'id', false, [
            	]) %>
        
        }   	
      } //b_set      



    , b_postpones: function(b_id, rec){
    	if (
    		!Ext.isEmpty(rec.get('execution_at')) ||
    		(Ext.util.Format.date(rec.get('datetime_op_end'), 'Ymd') > Ext.util.Format.date(new Date(), 'Ymd'))
    	) return '';     	
    	
        var me = this; //grid                
        var b = Ext.create('Ext.button.Button', {
        	text: 'Posticipa',
        	scale: 'medium', cls: 'btn-del',
        	handler: function(){
            	<%= raw confirm_with_note(url_for(:controller=>'custom_inspections', :action=>'exe_postpones'), "
							{
			            		afterSave: function(fromWin){
			            		    fromWin.destroy();
			            			me.store.load();
			            		}            	            	
			            	}            	
            	", 'id', false, [
            		{xtype: 'displayfield', value: 'Verr&agrave; posticipata la data di tutti containers presenti nella stessa richiesta'}.to_json,
            		{xtype: 'datefield', name: 'new_date', fieldLabel: 'Posticipa al', width: '100%', labelAlign: 'top', msgTarget: 'under', allowBlank: false}.to_json
            	]) %>        	
        	}
        });
		if (Ext.get(b_id)) {b.render(Ext.get(b_id));}		
		      
      } //b_postpones
      
    , b_ann: function(b_id, rec){
    	if (
    		!Ext.isEmpty(rec.get('execution_at')) ||
    		(Ext.util.Format.date(rec.get('datetime_op_end'), 'Ymd') > Ext.util.Format.date(new Date(), 'Ymd'))
    	) return '';     	
    	
        var me = this; //grid                
        var b = Ext.create('Ext.button.Button', {
        	text: 'Annulla',
        	scale: 'medium', cls: 'btn-del',
        	handler: function(){
            	<%= raw confirm_with_note(url_for(:controller=>'custom_inspections', :action=>'exe_dett_ann'), "
							{
			            		afterSave: function(fromWin){
			            		    fromWin.destroy();
			            			me.store.load();
			            		}            	            	
			            	}
            	", 'id', false, [
            	]) %>        	
        	}
        });
		if (Ext.get(b_id)) {b.render(Ext.get(b_id));}		
		      
      } //b_ann

                        	    
    }    
   
  ]
 }
 ]
}