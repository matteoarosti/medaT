{
 success: true,
 items: [
 {
  xtype: 'container',
  closable: true,
  title: 'Da ispezionare',
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},
	
  	

  items: [
       
		 {
				flex: 1,
				layout: 'fit',
        	    //title: <%= raw t('forms.to_be_inspect.details_label').to_json -%>, flex: 50,
        	    tools: [
                ],
        	    xtype: 'gridpanel',
				autoScroll: true,  
				scroll: true,      	    
        	    store: new Ext.data.Store({
        	    	autoLoad: true,
        	    	fields: [],
        	    	proxy: {
        	            type: 'ajax',
        	            url: <%= raw  (root_path + 'handling_headers/get_row_by_filtered_type').to_json -%>,
        	            extraParams: {filtered_type: <%= raw filtered_type.to_json -%>},
        	            reader: {
        	                type: 'json',
        	                rootProperty: 'items'
        	            }
        	        }
        	    }),
        	   
 		        	   
        	           	   
        	   dockedItems: [
        	   { 
        	    xtype: 'toolbar', dock: 'top', itemId: 'toptoolbar',
        	    items: [
        	     '->',
        	    	{
				    xtype: 'form',	
				    height: 50,
				    layout: {
					    type: 'hbox',
					    pack: 'start',
					    align: 'stretch'
					},
				    padding: '10 10 10 10',
				    items: [
				    	{
				    		flex: 1, hidden: true,
				            xtype: 'fieldcontainer',
				            fieldLabel: <%= raw t('forms.to_be_inspect.date_time').to_json -%>, labelAlign: 'right',
				            layout: 'hbox',
				            items: [
				            	{xtype: 'datefield', name: 'datetime_op_date', width: 120},
				            	{xtype: 'timefield', name: 'datetime_op_time', width:  70},
				            ]
				      }, {	
								flex: 1, padding: '0 0 0 10', hidden: true,
								xtype: 'checkboxfield',
				                boxLabel: <%= raw t('forms.to_be_inspect.disable_request').to_json -%>,
				                name: 'hide_check',
				                inputValue: '1'
				      }    
				     
				     
					, {	
								width: 200, labelWidth: 120, padding: '0 0 0 10',
								xtype: 'textfield',
								fieldStyle: 'font-size: 16px; text-transform: uppercase;',
				                fieldLabel: 'Ricerca container',
				                name: 'flt_num_container'
				      }				 
				     
				     
				    ]
				 }, {iconCls: 'fa fa-refresh fa-2x', text: 'Refresh', scale: 'large', 
				 		handler: function(event, toolEl, panel){ 
				 						loc_grid = this.up('grid');
				 						header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
				 						loc_grid.getStore().proxy.extraParams.flt_num_container = header_form.findField('flt_num_container').getValue(); 
				 						loc_grid.getStore().load();
				 			}
				 		}
				 ]
			  }
			],
        	           	    
        	    
			    columns: [{
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_inspect.sequence').to_json -%>,
			        width: 50,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h5>' + (rowIndex + 1) + '</h5>';
			        }			        
			    }, {
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_inspect.container').to_json -%>,
			        width: 220,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h1>' + rec.get('container_number') + '</h1>';
			        }			        
			    }, {
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_inspect.details').to_json -%>,
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '';
			         ret += '<table class=import_item_detail>';
			         ret += '<tr><th>Comp.</th><td>' + rec.data.shipowner.name + '</td></tr>';
			         ret += '<tr><th>Equip.</th><td>' + rec.get('equipment_id_Name') + '</td></tr>';
			         ret += '<tr><th>Stato</th><td>' + rec.get('container_status') + '</td></tr>';			         			         
			         ret += '</table>';
			         return ret;
			         
			        }			        	        
			    }, {
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_inspect.date').to_json -%>,
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '';
			         ret += '<table class=import_item_detail>';			         
					 ret += '<tr><th>Da ispezionare dal</th><td>' + Ext.util.Format.date(rec.get('get_lock_INSPECT_date'), 'd-m-Y H:i') + '</td></tr>';			         
			         ret += '</table>';
			         return ret;
			         
			        }			        	        
			    }, {
			        text: <%= raw t('forms.to_be_inspect.ok').to_json -%>, width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	var loc_grid = this;
			        	if (Ext.isEmpty(rec.get('status')) == false) return '';
			            var id = Ext.id();
			            setTimeout(function() {
			            
			                ok_img = 'fa-check-circle';
			                				            
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
								cls: 'btn-ok',
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();			                        
			                        
			                           //costruisco una form
			                           //se ho spuntato 'hide_check' committo subito
			                           //altrimenti mostro la form per la conferma
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                           
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										    {
										            xtype: 'fieldcontainer',
										            fieldLabel: <%= raw t('forms.to_be_inspect.date_time').to_json -%>,
										            layout: 'hbox',
										            items: [
										                {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},										                 
										            	{xtype: 'datefield', name: 'datetime_op_date', width: 120, value: header_form_values.datetime_op_date},
										            	{xtype: 'timefield', name: 'datetime_op_time', width:  70, value: header_form_values.datetime_op_time},
										            ]
										      }, 
										      {xtype: 'textareafield', name: 'notes', fieldLabel: <%= raw t('forms.to_be_inspect.notes').to_json -%>}
										    ]
										    , 	buttons:
											        [{
											            text: <%= raw t('forms.to_be_inspect.confirm').to_json -%>,
											            handler: function (btn, evt) {
											             btn.disable(); 
											                           
											             form = this.up('form').getForm();
											             tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'handling_headers', :action=>'hitems_sc_create') -%>',
															   jsonData: {
															   	data: {handling_header_id: rec.get('id'), handling_item_type: 'INSPECT'}
															   },
															   success: function(result, request) {
															   	  var jsonData = Ext.JSON.decode(result.responseText);
															   	  
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  
															   	  } else {
																      store.remove(rec);
																      tmp_win.close();															   	  
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: 'Errore sconosciuto',
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  															      
															   }

															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});
										
										//submit con hide_check
										if (header_form.findField('hide_check').getValue() == true){
										 
										 //TODO: ottimizzazione:
										 // eseguire evento sul bottone salva
										 
											Ext.Ajax.request({
											   method: 'POST',
											   url: '<%= url_for(:controller=>'handling_headers', :action=>'hitems_sc_create') -%>',
											   jsonData: {
											   	data: {handling_header_id: rec.get('id'), handling_item_type: 'INSPECT'}
											   },
															   success: function(result, request) {
															   	  var jsonData = Ext.JSON.decode(result.responseText);
															   	  
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  
															   	  } else {
																      store.remove(rec);															   	  
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: 'Errore sconosciuto',
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  															      
															   }

											});
										  		
										  return false;										
										}
										
										
										
			                           loc_win = Ext.create('Ext.window.Window',{
										    layout: 'fit',
										    items: loc_form,
										    title: <%= raw t('forms.to_be_inspect.import_confirm').to_json -%>,
										    width: 500,
										    height: 300,
										    id: 'myWindow'
										}).show();
													                           			                           
			                           return false;

			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }, {
			        text: <%= raw t('forms.to_be_inspect.damaged').to_json -%>, width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	var loc_grid = this;			        
			        	if (Ext.isEmpty(rec.get('status')) == false) return '';			        
			            var id = Ext.id();
			            setTimeout(function() {

			                var buttonRotto = Ext.create('Ext.button.Button', {
								text: '<i class="fa fa-warning fa-3x"></i>',
								cls: 'btn-del',
		                		scale: 'large',			                    
			                        handler: function(grid, rowIndex, colIndex, a, b) {

			                        
			                           //costruisco una form
			                           //se ho spuntato 'hide_check' committo subito
			                           //altrimenti mostro la form per la conferma
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                           
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										    {
										            xtype: 'fieldcontainer',
										            fieldLabel: 'Data/Ora',
										            layout: 'hbox',
										            items: [
										                {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},										                 
										            	{xtype: 'datefield', name: 'datetime_op_date', width: 120, value: header_form_values.datetime_op_date},
										            	{xtype: 'timefield', name: 'datetime_op_time', width:  70, value: header_form_values.datetime_op_time},
										            ]
										      }, 
										      {xtype: 'textareafield', name: 'notes', fieldLabel: <%= raw t('forms.to_be_inspect.notes').to_json -%>},
										      {xtype: 'fieldcontainer', layout: {
														    type: 'hbox'
														},
														items: [
														
															{xtype: 'grid', flex: 1, itemId: 'op_int',
																padding: 20, autoScroll: true,
																columns: [
																	{text: 'Operazioni eseguite ICOP', dataIndex: 'repair_processing_name', flex: 1, 
																		renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
																           return '<h3>' + value + '</h3>';
																        }},																    
																	 {
																        width: 50, align: 'center',
																        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
																        	var me = this; //me = grid;
																			var b_id = Ext.id();
																		    setTimeout(function(){me.b_add_qty.call(me, b_id, rec);}, 1);
																		    return '<div id="' + b_id + '"></div>';																        
																        }   
																     }, {																        
																        width: 50, align: 'center',
																        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
																        	var me = this; //me = grid;
																			var b_id = Ext.id();
																		    setTimeout(function(){me.b_dec_qty.call(me, b_id, rec);}, 1);
																		    return '<div id="' + b_id + '"></div>';																        
																        }   
																     }, {
																     	text: 'Qty', width: 50, dataIndex: 'qty',
																     	renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
																           return '<h3>' + value + '</h3>';
																        }
																     }    
																        
																],
																store: {
																	xtype: 'store',
																	autoLoad: true,	
																	proxy: {
																		url: 'bookings/to_check_get_data',
																		url: <%= raw  (root_path + 'repair_handling_items/get_processings_for_inspect_preassign').to_json -%>, 
																		extraParams: {shipowner_id: rec.get('shipowner_id'), op_for: 'int'},
																		method: 'POST',
																		type: 'ajax',															
																		actionMethods: {read: 'POST'},															
																		reader: {type: 'json', method: 'POST', rootProperty: 'items'}
																	},
																		
																	fields: [] //serve
																} //store
																
															      
															      
															    , b_add_qty: function(b_id, rec){
															        var me = this; //grid
															        var b = Ext.create('Ext.button.Button', {
															        	text: '+',
															        	scale: 'large',
															        	handler: function(){            	
															            	rec.set('qty', rec.get('qty') + 1);
															        	}
															        });
																	if (Ext.get(b_id)) {b.render(Ext.get(b_id));}      
															      } //b_add_qty
															      
															    , b_dec_qty: function(b_id, rec){
															        var me = this; //grid
															        var b = Ext.create('Ext.button.Button', {
															        	text: '-',
															        	scale: 'large',
															        	handler: function(){
															        	    if (rec.get('qty') > 0)        	
															            		rec.set('qty', rec.get('qty') - 1);
															        	}
															        });
																	if (Ext.get(b_id)) {b.render(Ext.get(b_id));}      
															      } //b_dec_qty																      															      
															      
															},	//grid
															
															{xtype: 'grid', flex: 1, itemId: 'op_off',
																padding: 20, autoScroll: true, scroll: true,
																columns: [
																	{text: 'Operazioni da eseguire OFFICINA', dataIndex: 'repair_processing_name', flex: 1, 
																		renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
																           return '<h3>' + value + '</h3>';
																        }},																    
																	 {
																        width: 50, align: 'center',
																        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
																        	var me = this; //me = grid;
																			var b_id = Ext.id();
																		    setTimeout(function(){me.b_add_qty.call(me, b_id, rec);}, 1);
																		    return '<div id="' + b_id + '"></div>';																        
																        }   
																     }, {
																        width: 50, align: 'center',
																        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
																        	var me = this; //me = grid;
																			var b_id = Ext.id();
																		    setTimeout(function(){me.b_dec_qty.call(me, b_id, rec);}, 1);
																		    return '<div id="' + b_id + '"></div>';																        
																        }   
																     }, {
																     	text: 'Qty', width: 50, dataIndex: 'qty',
																     	renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
																           return '<h3>' + value + '</h3>';
																        }
																     }    
																        
																],
																store: {
																	xtype: 'store',
																	autoLoad: true,	
																	proxy: {
																		url: 'bookings/to_check_get_data',
																		url: <%= raw  (root_path + 'repair_handling_items/get_processings_for_inspect_preassign').to_json -%>, 
																		extraParams: {shipowner_id: rec.get('shipowner_id'), op_for: 'off'},
																		method: 'POST',
																		type: 'ajax',															
																		actionMethods: {read: 'POST'},															
																		reader: {type: 'json', method: 'POST', rootProperty: 'items'}
																	},
																		
																	fields: [] //serve
																} //store
																
															      
															      
															    , b_add_qty: function(b_id, rec){
															        var me = this; //grid
															        var b = Ext.create('Ext.button.Button', {
															        	text: '+',
															        	scale: 'large',
															        	handler: function(){            	
															            	rec.set('qty', rec.get('qty') + 1);
															        	}
															        });
																	if (Ext.get(b_id)) {b.render(Ext.get(b_id));}      
															      } //b_add_qty
															      
															    , b_dec_qty: function(b_id, rec){
															        var me = this; //grid
															        var b = Ext.create('Ext.button.Button', {
															        	text: '-',
															        	scale: 'large',
															        	handler: function(){
															        	    if (rec.get('qty') > 0)        	
															            		rec.set('qty', rec.get('qty') - 1);
															        	}
															        });
																	if (Ext.get(b_id)) {b.render(Ext.get(b_id));}      
															      } //b_dec_qty																      															      
															      
															}	//grid													
																

														]
											  }
										    ]
										    , 	buttons:
											        [{
											        	text: '< Indietro', scale: 'large', cls: 'btn-used', handler: function(){this.up('window').destroy();}
											        }, {xtype: 'tbfill'}, {
											            text: 'Conferma e dichiara come riparato', scale: 'large', cls: 'btn-del',
											            handler: function (btn, evt) {
											             btn.disable();
											             
											             var v_form = this.up('form');
											             
											             var ar_op_int = [], ar_op_off = [];

														 //lavorazioni eseguite internamente												             
											             v_form.down('#op_int').store.each(function(r){
															if (r.get('qty') > 0)
																ar_op_int.push({repair_processing_id: r.get('id'), qty: r.get('qty')});
														 });
														 
														 //lavorazioni da preassegnare a officina												             
											             v_form.down('#op_off').store.each(function(r){
															if (r.get('qty') > 0)
																ar_op_off.push({repair_processing_id: r.get('id'), qty: r.get('qty')});
														 });														 
              
											             var form = this.up('form').getForm();
											             var tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'handling_headers', :action=>'hitems_sc_create') -%>',
															   jsonData: {
															   		data: {
															   				handling_header_id: rec.get('id'), 
															   				handling_item_type: 'INSPECT',
															   				notes: form.findField('notes').getValue(),
															   				formDamageValues: {
															   					op_int: ar_op_int,
															   					op_off: ar_op_off,
															   					isRepairCompleted: true
															   				}
															   			},
															   		set_lock_type: 'DAMAGED'
															   },
															   success: function(response, opts) {
															      store.remove(rec);
															      tmp_win.close();
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
															   }
															});	
														  return false;												             
											             }
											            }
											          }, {
											            text: 'Conferma e invia a officina', scale: 'large',
											            handler: function (btn, evt) {
											             btn.disable();
											             
											             var v_form = this.up('form');
											             
											             var ar_op_int = [], ar_op_off = [];

														 //lavorazioni eseguite internamente												             
											             v_form.down('#op_int').store.each(function(r){
															if (r.get('qty') > 0)
																ar_op_int.push({repair_processing_id: r.get('id'), qty: r.get('qty')});
														 });
														 
														 //lavorazioni da preassegnare a officina												             
											             v_form.down('#op_off').store.each(function(r){
															if (r.get('qty') > 0)
																ar_op_off.push({repair_processing_id: r.get('id'), qty: r.get('qty')});
														 });														 
              
											             var form = this.up('form').getForm();
											             var tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'handling_headers', :action=>'hitems_sc_create') -%>',
															   jsonData: {
															   		data: {
															   				handling_header_id: rec.get('id'), 
															   				handling_item_type: 'INSPECT',
															   				notes: form.findField('notes').getValue(),
															   				formDamageValues: {
															   					op_int: ar_op_int,
															   					op_off: ar_op_off
															   				}
															   			},
															   		set_lock_type: 'DAMAGED'
															   },
															   success: function(response, opts) {
															      store.remove(rec);
															      tmp_win.close();
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
															   }
															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});


			                           loc_win = Ext.create('Ext.window.Window',{
										    layout: 'fit',
										    items: loc_form,
										    title: <%= raw t('forms.to_be_inspect.import_confirm').to_json -%>,
										    width: 500,
										    height: 300,
										    id: 'myWindow',
										    listeners: {
										    	afterrender: function(compo){
										    		console.log('aaaaaaaa');
										    		/*compo.down('#op_int').getSelectionModel().deselectAll();
										    		compo.down('#op_off').getSelectionModel().deselectAll();
										    		compo.down('#op_off').getSelectionModel().selectAll();*/
										    	}
										    }
										}).show().maximize();
													                           			                           
			                           return false;



			                        }, scope: rec

			                });			                
			                if (Ext.get(id)) {
			                    buttonRotto.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }   
        
        ],
			    
			    

			    
			    listeners: {
					    celldblclick: function(gridView,htmlElement,columnIndex,rec){

					        if (columnIndex == 1) { //doppio click sul num_container... apro il movimento aperto

									new_rec = HandlingHeader.load(rec.get('id'));
							        newPanel = Ext.create('FeedViewer.MovimentoPanel', {
										title: 'Mov. ' + rec.get('container_number'),
										closable: true			
							        });
							        
			                		newPanel.getViewModel().setData({rec: new_rec, 
			                			is_handling_editable: false,
			                			is_container_editable: false
			                		});
			                    	myApp.feedInfo.add(newPanel).show();
						            myApp.feedInfo.setActiveTab(myApp.feedInfo.items.length - 1);    
					        }
					    }
					}
				    

                        	    
        	}    
   
   
   
  ]
 }
 ]
}
