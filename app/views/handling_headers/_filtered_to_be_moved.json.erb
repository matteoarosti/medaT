{
 success: true,
 items: [
 {
  xtype: 'container',
  closable: true,
  title: 'Da movimentare',
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},
	
  	

  items: [
       
		 {
				flex: 1,
				layout: 'fit',
        	    //title: <%= raw t('forms.to_be_handled.list').to_json -%>, flex: 50,
        	    tools: [
                ],
        	    xtype: 'gridpanel',
				autoScroll: true,  
				scroll: true,      	    
        	    store: new Ext.data.Store({
        	    	autoLoad: true,
        	    	fields: [],
        	    	proxy: {
        	            type: 'ajax',
        	            url: <%= raw  (root_path + 'handling_headers/get_row_by_filtered_type').to_json -%>,
        	            extraParams: {filtered_type: <%= raw filtered_type.to_json -%>},
        	            reader: {
        	                type: 'json',
        	                rootProperty: 'items'
        	            }
        	        }
        	    }),
        	   
 		        	   
        	           	   
        	   dockedItems: [
        	   { 
        	    xtype: 'toolbar', dock: 'top', itemId: 'toptoolbar',
        	    items: [
        	    	<% if current_user.mulettista? %>
						{iconCls: 'fa fa-search fa-2x', text: 'Ricerca movimenti', scale: 'large',				 				 
				 				handler: function(event, toolEl, panel){
									//se gia' esiste eseguo la show del tab						
									if (Ext.getCmp('main_panel_handling_search')){
										Ext.getCmp('main_panel_handling_search').show();
										Ext.getCmp('main_panel_handling_search').down('form').getForm().findField('search_number').focus();
										return;		    	
									}
									
									myApp.m_panel_NewHandlingHeader = Ext.create('FeedViewer.NewHandlingHeaderPanel');
									myApp.add(myApp.m_panel_NewHandlingHeader);
									myApp.setActiveTab(myApp.m_panel_NewHandlingHeader);
									Ext.getCmp('main_panel_handling_search').down('form').getForm().findField('search_number').focus();
												
									return;
				 						
				 				} //handler
				 	},
				   <% end %>	
        	    
        	    '->',
        	    {
				    xtype: 'form',	
				    hidden: false,
				    height: 50,
				    layout: {
					    type: 'hbox',
					    pack: 'start',
					    align: 'stretch'
					},
				    padding: '10 10 10 10',
				    items: [
				    	{
				    		flex: 1, hidden: true,
				            xtype: 'fieldcontainer',
				            fieldLabel: <%= raw t('forms.to_be_handled.date_time').to_json -%>, labelAlign: 'right',
				            layout: 'hbox',
				            items: [
				            	{xtype: 'datefield', name: 'datetime_op_date', width: 120},
				            	{xtype: 'timefield', name: 'datetime_op_time', width:  70},
				            ]
				      }, {	
								flex: 1, padding: '0 0 0 10', hidden: true,
								xtype: 'checkboxfield',
				                boxLabel: <%= raw t('forms.to_be_handled.disable_request').to_json -%>,
				                name: 'hide_check',
				                inputValue: '1',
				                value: 1
				      }, {	
								flex: 1, padding: '0 0 0 10',
								xtype: 'checkboxfield',
				                boxLabel: 'Escludi Messa a Disposizione',
				                name: 'no_cust_inspect',
				                inputValue: 'Y',
				                uncheckedValue: 'N'
				      }, {	
								width: 200, labelWidth: 120, padding: '0 0 0 10',
								xtype: 'textfield',
								fieldStyle: 'font-size: 16px; text-transform: uppercase;',
				                fieldLabel: 'Ricerca container',
				                name: 'flt_num_container'
				      }				 
				     
				    ]
				 }

				 
				 
				 ,  {iconCls: 'fa fa-refresh fa-2x', text: 'Refresh', scale: 'large',				 				 
				 				handler: function(event, toolEl, panel){
				 						loc_grid = this.up('grid');
				 						header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
				 						loc_grid.getStore().proxy.extraParams.flt_num_container = header_form.findField('flt_num_container').getValue();
				 						loc_grid.getStore().proxy.extraParams.no_cust_inspect = header_form.findField('no_cust_inspect').getSubmitValue(); 
				 						loc_grid.getStore().load();
				 				}
				 	}
				 ]
			  }
			],

        	           	    
        	    
			    columns: [{
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_handled.sequence').to_json -%>,
			        width: 50,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h5>' + (rowIndex + 1) + '</h5>';
			        }			        
			    }, {
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_handled.container').to_json -%>,
			        width: 220,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h1>' + rec.get('handling_header').container_number + '</h1>';
			        }			        
			    }, {
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_handled.details').to_json -%>,
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         
			         if (rec.get('to_be_moved_type') == 'CUST_INSPECTION'){
			           ret = '<h3>MESSA A DISPOSIZIONE (' + Ext.util.Format.date(rec.data.handling_header.expiration_date, 'd-m-y') + ')</h3>';
			           ret += '<table class=import_item_detail>';
			           ret += '<tr><th>Comp.</th><td>' + rec.data.handling_header.shipowner.name + '</td></tr>';
			           ret += '<tr><th>Cli.</th><td>' + rec.data.handling_header.customer.name + '</td></tr>';
			           ret += '</table>';
			           return ret;
			         }
			         
			         
			         if (Ext.isEmpty(rec.get('plate')))
			          out_plate = '';
			         else
			          out_plate = '[' + rec.get('plate') + ']';
			          
			         ret = '';
			         ret += '<table class=import_item_detail>';
			         ret += '<tr><th>Comp.</th><td>' + rec.data.handling_header.shipowner.name + '</td></tr>';
			         ret += '<tr><th>Equip.</th><td>' + rec.get('handling_header').equipment.equipment_type + '</td></tr>';	
			         ret += '<tr><th>Targa/Aut.</th><td>' + out_plate + ' ' + rec.get('driver') + ' - ' + rec.get('carrier_id_Name') + '</td></tr>';
			         ret += '</table>';
			         return ret;
			         
			        }			        	        
			    }
			    
			    
        	     , {text: <%= raw t('forms.to_be_handled.io').to_json -%>, width: 60, dataIndex: 'handling_type', tooltip: 'Entrata / Uscita', tdCls: 'm-only-icon', renderer: function(value, metaData){return this.get_image_IO(value, metaData);}}
                 , {text: <%= raw t('forms.to_be_handled.fe').to_json -%>, width: 60, dataIndex: 'container_FE', tooltip: 'Pieno / Vuoto', tdCls: 'm-only-icon', renderer: function(value, metaData){return this.get_image_FE(value, metaData);}}
			    
			   , {
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_handled.positioning').to_json -%>,
			        width: 150,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        
			         if (rec.get('to_be_moved_type') == 'CUST_INSPECTION'){
			          return '';
			         }
			         
			         fila = '';
			         tiro = '';
			         blocco = '';
			         banchina = '';
			         if (!Ext.isEmpty(rec.get('handling_header').fila))
			          fila = rec.get('handling_header').fila + '';
			         if (!Ext.isEmpty(rec.get('handling_header').blocco))
			          blocco = rec.get('handling_header').blocco;
			         if (!Ext.isEmpty(rec.get('handling_header').tiro))
			          tiro = rec.get('handling_header').tiro;
			         if (!Ext.isEmpty(rec.get('handling_header').pier))
			          banchina = rec.get('handling_header').pier.name;
			          
			         ret = '';
			         ret += '<table class=import_item_detail>';			  
 			         ret += '<tr><td colspan=2 style="padding-left: 0px">' + banchina + '</td></tr>';			         
					 ret += '<tr><th>Fila</th><td>' + fila + '</td></tr>';			         
					 ret += '<tr><th>Blocco</th><td>' + blocco + '</td></tr>';
					 ret += '<tr><th>Tiro</th><td>' + tiro + '</td></tr>';
			         ret += '</table>';
			         return ret;
			         
			        }			        	        
			    }, {
			        text: <%= raw t('forms.to_be_moved.ok').to_json -%>, width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			        			        			        
			        	var loc_grid = this;
			        	
			        	if (rec.get('lock_type') == 'INSPECT' && rec.get('handling_header').lock_fl == true && rec.get('handling_header').lock_type == 'INSPECT') return '';
			            var id = Ext.id();
			            setTimeout(function() {
			            			          
			                ok_img = 'fa-check-circle';
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();
			                        
			                        
			                           if (rec.get('to_be_moved_type') == 'CONT_PRE_ASS'){
			                            //e' una preassegnazione di container (es: uscita vuoto per riempimento)
			                            // apro la maschera perche' e' direttamente il mulettista che sceglie il container e esegue l'operazione sul movimento
			                            console.log('PRE-ASSEGNAZIONE'); 
			                            console.log(rec.data);
				                			                             
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                             
           								loc_form = Ext.create('Ext.form.Panel', {
											    title: '',
											    bodyPadding: 10,
											    defaultType: 'textfield',
											    	layout: {
													    type: 'vbox',
													    align : 'stretch',
													    pack  : 'start',
													},
											    items: [
											      {xtype: 'hiddenfield', name: 'to_do_item_id', value: rec.get('id')},
											      {xtype: 'hiddenfield', name: 'num_container_verified'},
											      {xtype: 'textfield', 	   name: 'num_container', fieldLabel: 'Container', 
											       fieldStyle: 'font-size: 32px; text-transform: uppercase;'},
											      {xtype: 'textareafield', name: 'notes', fieldLabel: 'Notes'},
											      {xtype: 'displayfield', name: 'booking_notes', fieldLabel: 'Note Booking', value: Ext.util.Format.nl2br(rec.get('booking_notes'))}
											    ]
											    ,
								    			dockedItems: [{
												    xtype: 'toolbar',
												    dock: 'right',
												    width: 135,
													defaults: {
												        xtype: 'button', scale: 'medium', textAlign: 'left'
									                },			    
												    margin: '5 5 5 5',
											    
											     	items:
												        [{
												            text: 'Verifica',
												            scale: 'large', cls: 'btn-confirm',
												            handler: function (btn, evt) {
												             btn.disable();
												                           
												             form = this.up('form').getForm();
												             tmp_win  = this.up('window');
												             if (form.isValid()) {
																Ext.Ajax.request({
																   method: 'POST',
																   waitMsg: 'Attendere',
																   url: '<%= url_for(:controller=>'to_do_items', :action=>'close_to_be_moved') -%>',
																   jsonData: {
																   	data: form.getValues()
																   },
																   success: function(result, request) {
																   
																      var jsonData = Ext.JSON.decode(result.responseText);
																   
																   	  if (jsonData.success == false){
																   	  	form.findField('num_container_verified').setValue('');
																	    btn.setText('Verifica');
																	    btn.enable();
																		Ext.MessageBox.show({
													                        title: 'EXCEPTION',
													                        msg: jsonData.message,
													                        icon: Ext.MessageBox.ERROR,
													                        buttons: Ext.Msg.OK
												                    	})															   	  
																   	  } else {
																   	  	 if (jsonData.confirmed == true){
																	      store.remove(rec);
																	      store.load();
																	      tmp_win.close();
																	     } else { //non confermato ... riabilito bottone per confermare
																	       form.findField('num_container_verified').setValue(jsonData.num_container_verified);
																	       btn.setText('Conferma');
																	       btn.enable();
																	       																	       
																	       //se presenti mostro le note
																	       if (!Ext.isEmpty(jsonData.notes_all)){
																	       		msg = '';

																				Ext.each(jsonData.notes_all || [], function(item) {
																					msg += '---- ' + item.op_out + ' -----' + '<br>' + item.notes + '<br>' + item.notes_int + '<br>'																					
																				}, this);

																				Ext.MessageBox.show({
															                        title: 'PRESENTI NOTE SU CONTAINER',
															                        msg: msg,
															                        icon: Ext.MessageBox.ERROR,
															                        buttons: Ext.Msg.OK
														                    	})																	       	
																	       
																	       																	       
																	       }
																	       
																	     } 
																   	  }																   
																   

																   },
																   failure: function(response, opts) {
																      console.log('server-side failure with status code ' + response.status);
																		form.findField('num_container_verified').setValue('');
																	    btn.setText('Verifica');
																	    btn.enable();																      
																      
																		Ext.MessageBox.show({
													                        title: 'EXCEPTION',
													                        msg: response.status,
													                        icon: Ext.MessageBox.ERROR,
													                        buttons: Ext.Msg.OK
												                    	})																      
																   }
																});	
															  return false;												             
												             }
												            }
												          }, 
												          
												          {
												            text: 'Chiudi',												            
												            scale: 'large',
												            handler: function (btn, evt) {
												            	tmp_win  = this.up('window');
												            	tmp_win.close();
												            }
												          }
												          
												         ]
	  												}]
											});		
											
				                           loc_win = Ext.create('Ext.window.Window',{
											    layout: 'fit',
											    items: loc_form,
											    title: 'Assegna container',
											    width: 500,
											    height: 300,
											    id: 'myWindow'
											}).show();
														                             
			                             
			                             
			                           	return false; //FINE PRE-ASSEGNAZIONE
			                           }
			                        
			                           //costruisco una form
			                           //se ho spuntato 'hide_check' committo subito
			                           //altrimenti mostro la form per la conferma
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                           
			                           if (rec.get('to_be_moved_type') == 'CUST_INSPECTION'){
											var m_url = '<%= url_for(:controller=>'custom_inspections', :action=>'set_available') -%>';
											var m_jsonData = {rec_id: rec.get('rec_id')};  
			                           } else {
			                           		var m_url = '<%= url_for(:controller=>'handling_headers', :action=>'hitems_close_to_be_moved') -%>';
											var m_jsonData = {data: {handling_item_id: rec.get('id')}};
			                           }
			                           
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										    {
										            xtype: 'fieldcontainer',
										            fieldLabel: <%= raw t('forms.to_be_handled.date_time').to_json -%>,
										            layout: 'hbox',
										            items: [
										                {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},										                 
										            	{xtype: 'datefield', name: 'datetime_op_date', width: 120, value: header_form_values.datetime_op_date},
										            	{xtype: 'timefield', name: 'datetime_op_time', width:  70, value: header_form_values.datetime_op_time},
										            ]
										      }, 
										      {xtype: 'textareafield', name: 'notes', fieldLabel: 'Notes'}										    										    										    
										    ]
										    , 	buttons:
											        [{
											            text: <%= raw t('forms.to_be_handled.confirm').to_json -%>,
											            handler: function (btn, evt) {
											             btn.disable();
											                           
											             form = this.up('form').getForm();
											             tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   /*
															   url: '<%= url_for(:controller=>'handling_headers', :action=>'hitems_close_to_be_moved') -%>',
															   jsonData: {
															   	data: {handling_item_id: rec.get('id')}
															   },
															   */
															   url: m_url,
															   jsonData: m_jsonData,
															   success: function(response, opts) {
															      store.remove(rec);
															      store.load();
															      tmp_win.close();
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
															   }
															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});
										
										//submit con hide_check
										if (header_form.findField('hide_check').getValue() == true){
										 
										 //TODO: ottimizzazione:
										 // eseguire evento sul bottone salva
										 
											Ext.Ajax.request({
											   method: 'POST',
											   /*
											   url: '<%= url_for(:controller=>'handling_headers', :action=>'hitems_close_to_be_moved') -%>',
											   jsonData: {
											   	data: {handling_item_id: rec.get('id')}
											   },
											   */
											   url: m_url,
											   jsonData: m_jsonData,
											   success: function(response, opts) {
											      store.remove(rec);
											      store.load();
											   },
											   failure: function(response, opts) {
											      console.log('server-side failure with status code ' + response.status);
											   }
											});
										  		
										  return false;										
										}
										
										
										
			                           loc_win = Ext.create('Ext.window.Window',{
										    layout: 'fit',
										    items: loc_form,
										    title: <%= raw t('forms.to_be_handled.import_confirm').to_json -%>,
										    width: 500,
										    height: 300,
										    id: 'myWindow'
										}).show();
													                           			                           
			                           return false;

			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }
			     
			     
			     
        
				, {
			        text: <%= raw t('forms.to_be_moved.inspect_ok').to_json -%>, width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	var loc_grid = this;

			        	if (rec.get('lock_type') != 'INSPECT' || rec.get('handling_header').lock_fl == false || rec.get('handling_header').lock_type != 'INSPECT') return '';
			            var id = Ext.id();
			            setTimeout(function() {
			            
			                ok_img = 'fa-check-circle';
			                				            
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
								cls: 'btn-ok',
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();			                        
			                        
											Ext.Ajax.request({
											   method: 'POST',
											   url: '<%= url_for(:controller=>'handling_headers', :action=>'hitems_sc_create') -%>',
											   jsonData: {
											    handling_item_to_be_moved_close: rec.get('id'),
											   	data: {
											   		handling_header_id: rec.get('handling_header_id'), 
											   		handling_item_type: 'INSPECT'											   		
											   	}
											   },
															   success: function(result, request) {
															   	  var jsonData = Ext.JSON.decode(result.responseText);
															   	  
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  
															   	  } else {
																      store.remove(rec);
																	  store.load();
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: 'Errore sconosciuto',
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  															      
															   }

											});
										  		
										  return false;										
			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }, {
			        text: <%= raw t('forms.to_be_moved.inspect_damaged').to_json -%>, width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	var loc_grid = this;		
			        		        
			        	if (rec.get('lock_type') != 'INSPECT' || rec.get('handling_header').lock_fl == false || rec.get('handling_header').lock_type != 'INSPECT') return '';			        
			            var id = Ext.id();
			            setTimeout(function() {

			                var buttonRotto = Ext.create('Ext.button.Button', {
								text: '<i class="fa fa-warning fa-3x"></i>',
								cls: 'btn-del',
		                		scale: 'large',			                    
			                        //handler: function(grid, rowIndex, colIndex, a, b) {
			                        handler: function(button, b, c, d, e) {

			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();

			                        
			                           //costruisco una form
			                           //se ho spuntato 'hide_check' committo subito
			                           //altrimenti mostro la form per la conferma
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                           
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										    {
										            xtype: 'fieldcontainer',
										            fieldLabel: 'Data/Ora',
										            layout: 'hbox',
										            items: [
										                {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},										                 
										            	{xtype: 'datefield', name: 'datetime_op_date', width: 120, value: header_form_values.datetime_op_date},
										            	{xtype: 'timefield', name: 'datetime_op_time', width:  70, value: header_form_values.datetime_op_time},
										            ]
										      }, 
										      {xtype: 'textareafield', name: 'notes', fieldLabel: <%= raw t('forms.to_be_inspect.notes').to_json -%>}
										    ]
										    , 	buttons:
											        [{
											            text: 'Conferma',
											            handler: function (btn, evt) { 
											             btn.disable();
											                          
											             form = this.up('form').getForm();
											             tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'handling_headers', :action=>'hitems_sc_create') -%>',
															   jsonData: {
															   		handling_item_to_be_moved_close: rec.get('id'),
															   		data: {
															   				handling_header_id: rec.get('handling_header_id'), 
															   				handling_item_type: 'INSPECT'															   				
															   			},
															   		set_lock_type: 'DAMAGED'
															   },
															   success: function(result, request) {
															   		var jsonData = Ext.JSON.decode(result.responseText);
															   
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  
															   	  } else {
																      store.remove(rec);
																      store.load();
																      tmp_win.close();															   	 
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
															   }
															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});


			                           loc_win = Ext.create('Ext.window.Window',{
										    layout: 'fit',
										    items: loc_form,
										    title: <%= raw t('forms.to_be_inspect.import_confirm').to_json -%>,
										    width: 500,
										    height: 300,
										    id: 'myWindow'
										}).show();
													                           			                           
			                           return false;



			                        }, scope: rec

			                });			                
			                if (Ext.get(id)) {
			                    buttonRotto.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }           
        
        
        
        
        
        
        
        
        
        ], //column
        
        
        
        	//TODO: DRY
				get_image_IO: function(val, metaData){
					if (val == 'I') metaData.tdAttr = 'data-qtip="Entrata"';
					if (val == 'O') metaData.tdAttr = 'data-qtip="Uscita"';					
					
	 				if (val == 'I') return '<i class="fa fa-download fa-3x" style="color:green;"></i>';
	 				if (val == 'O') return '<i class="fa fa-upload fa-3x" style="color:red;"></i>';
				},
				get_image_FE: function(val, metaData){
					if (val == 'F') metaData.tdAttr = 'data-qtip="Pieno"';
					if (val == 'E') metaData.tdAttr = 'data-qtip="Vuoto"';					
					
					if (val == 'F') return '<i class="fa fa-square fa-3x" style="color:brown;"></i>';
					if (val == 'E') return '<i class="fa fa-square-o fa-3x" style="color:brown;"></i>';
				},        
			    
			    

			    
			    listeners: {
					    celldblclick: function(gridView,htmlElement,columnIndex,rec){

					        if (columnIndex == 1) { //doppio click sul num_container... apro il movimento aperto

									new_rec = HandlingHeader.load(rec.get('handling_header_id'));
							        newPanel = Ext.create('FeedViewer.MovimentoPanel', {
										title: 'Mov. ' + rec.get('container_number'),
										closable: true			
							        });
							        
			                		newPanel.getViewModel().setData({rec: new_rec, 
			                			is_handling_editable: false,
			                			is_container_editable: false
			                		});
			                    	myApp.feedInfo.add(newPanel).show();
						            myApp.feedInfo.setActiveTab(myApp.feedInfo.items.length - 1);    
					        }
					    }
					}
				    

                        	    
        	}    
   
   
   
  ]
 }
 ]
}
