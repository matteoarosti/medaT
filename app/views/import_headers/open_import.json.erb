{
 success: true,
 items: [
 {
  xtype: 'panel',
  itemId: 'panel-import',
  layout: 'fit',
  closable: true,
  title: 'Import',
/*    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},*/

  items: [
       
   // grid con righe import
		 {
				flex: 1,
				layout: 'fit',
        	    title: 'Importazione',
        	    tools: [
                ],
        	    xtype: 'gridpanel',
				autoScroll: true,  
				scroll: true,      	    
        	    store: new Ext.data.Store({
        	    	autoLoad: false,
        	    	fields: [],
        	    	proxy: {
        	            type: 'ajax',
        	            url: <%= raw  (root_path + 'import_headers/get_import_row').to_json -%>,
        	            extraParams: {import_header_id: <%= @ih.id -%>},
        	            reader: {
        	                type: 'json',
        	                rootProperty: 'items'
        	            }
        	        }
        	    }),
        	   
 		        	   
        	           	   
        	   dockedItems: [
        	   { 
        	    xtype: 'toolbar', dock: 'top', itemId: 'toptoolbar',
        	    //height: 70,
        	    //hidden: true,
        	    items: [{
				    xtype: 'form',				    
				    layout: {
					    type: 'hbox',
					    pack: 'start',
					    align: 'stretch'
					},
				    padding: '10 10 10 10',
				    items: [
				    	{xtype: 'hiddenfield', name: 'pier_id'},
				    	{xtype: 'hiddenfield', name: 'gru_id'},
				    	
				    	
				    	
				    	{
				    		flex: 1,
				            xtype: 'fieldcontainer',
				            fieldLabel: 'Data/Ora', labelAlign: 'right',
				            itemId: 'containerDataOra',
				            layout: 'hbox',
				            items: [
				            	{xtype: 'datefield', name: 'datetime_op_date', width: 120},
				            	{xtype: 'timefield', name: 'datetime_op_time', width:  70},
				            ]
				      	}
				      
				      
				      ,	{
				    		flex: 1,
				            xtype: 'fieldcontainer',			
				            itemId: 'containerFilter',	          
				            layout: 'vbox',
				            items: [
						      {	
										xtype: 'checkboxfield',
										flex: 1,
						                boxLabel: 'Dis. richiesta conferma',
						                name: 'hide_check',
						                inputValue: '1'
						      }						      								      
							 , {	
									xtype: 'checkboxfield',
									flex: 1,
					                boxLabel: 'Anche importati',
					                itemId: 'show_imported',
					                name: 'show_imported',
					                inputValue: '1'
							      }
				            
				            ]
				        }
				        
				      
				          
				     
				     , {
								width: 180, labelWidth: 80, padding: '0 0 0 10', margin: '0 0 0 10',
								xtype: 'textfield',
								fieldStyle: 'font-size: 16px; text-transform: uppercase;',
				                fieldLabel: 'Container',
				                labelAlign: 'right',
				                name: 'flt_num_container'
				      }
				      
				      , {
								width: 120, labelWidth: 40, padding: '0 0 0 10', margin: '0 0 0 10',
								xtype: 'textfield',
								fieldStyle: 'font-size: 16px; text-transform: uppercase;',
				                fieldLabel: 'Stiva',
								labelAlign: 'right',
				                name: 'flt_pos'
				      }
				     
				     , {
								width: 120, labelWidth: 40, padding: '0 0 0 10', margin: '0 0 0 10',
								xtype: 'textfield',
								fieldStyle: 'font-size: 16px; text-transform: uppercase;',
				                fieldLabel: 'Mossa',
								labelAlign: 'right',
				                name: 'flt_mossa'
				      }									     
				    ]
				    
				    , listeners: {
				    	afterrender: function(comp){
				    		comp.up('#panel-import').disable();
				    		
				    		if (myApp.type_role == 'mulettista'){
				    			console.log('disabilito filtriii');
				    			comp.down('#containerFilter').hide();
				    			comp.down('#containerDataOra').hide();
				    		}
				    	
				    		//forzo selezione banchina/gru				    		
				 				var my_listeners = {
			                		afterSave: function(fromWindow, formValues){
			                			comp.getForm().findField('pier_id').setValue(formValues.pier_id);
			                			comp.getForm().findField('gru_id').setValue(formValues.gru_id);
			                			comp.up('grid').setTitle(comp.up('grid').title + ' - Banchina: ' + formValues.pier_out + ' - Gru: ' + formValues.gru_out);
			                			comp.up('grid').store.load();
			                			comp.up('#panel-import').enable();
			                			fromWindow.close();
			                		}, scope: this			                				                		
			                	}				    		
				    		
								acs_show_win_std('Seleziona banchina/gru', <%= raw url_for(:controller=>'terminal_movs', 
									     	 				:action=>'set_pier_gru').to_json -%>,
									     	 				{}, 800, 400, my_listeners);				    		
				    	}//afterrender
				    }
				 }
				 
				 , '->'
				 
				 
				 , {iconCls: 'fa fa-check-circle fa-2x', scale: 'large',
				 		text: 'Importa tutti', cls: 'btn-ok',
						handler: function(event, toolEl, panel){
											form = this.up('panel').down('form').getForm();
											grid = this.up('grid');
											
									Ext.Msg.confirm({
				                        title: 'Confirm',
				                        msg: 'Confermi l\'importazione di tutti i movimenti?',
				                        icon: Ext.MessageBox.ERROR,
				                        buttons: Ext.Msg.YESNO,
										fn: function(btn){                    
										         if (btn == "no"){ //NO, esco
										           return false;              
										        }
										        if (btn == "yes"){ //YES, proseguo

														Ext.getBody().mask("Loading...");
											
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'import_items', :action=>'set_ok_all') -%>',
															   jsonData: {import_header_id: <%= @ih.id -%>, check_form: form.getValues()},
															   success: function(result, request) {
															   	  var jsonData = Ext.JSON.decode(result.responseText);
															   	  
															   	 	Ext.getBody().unmask();
															   	  
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})		
											                   		grid.getStore().load();													   	  
															   	  } else {
																      grid.getStore().load();															   	  
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															  		Ext.getBody().unmask();
															      console.log('server-side failure with status code ' + response.status);
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: 'Errore sconosciuto',
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})						
											                    	grid.getStore().load();									   	  															      
															   }
															});	
												}			
											}
										})

				 		}
				 	}
				 	
				 	
<% if User.current.admin_can?(:import, :verify) && @ih.import_type == 'D' %>
	 , {iconCls: 'fa fa-question-circle-o fa-2x', scale: 'large',
	 		text: 'Riapri', 
			handler: function(event, toolEl, panel){
			    var grid = this.up('grid');
				Ext.Msg.confirm({
	                title: 'Confirm',
	                msg: 'Confermi la riapertura dei movimenti non generati?',
	                icon: Ext.MessageBox.ERROR,
	                buttons: Ext.Msg.YESNO,
					fn: function(btn){
						Ext.Ajax.request({
						   method: 'POST',
						   url: '<%= url_for(:controller=>'import_items', :action=>'reopen_D_non_created') -%>',
						   jsonData: {import_header_id: <%= @ih.id -%>},
						   success: function(result, request) {
						   	  var jsonData = Ext.JSON.decode(result.responseText);								   	  
						   	  Ext.getBody().unmask();								   	  
			                  grid.getStore().load();													   	  
						   }
						});											
					}                    
	  			});
			}
		}
<% end %>
				 	
				 	
<% if User.current.admin_can?(:import, :verify) && @ih.handling_type == 'TMOV' %>
				 , {    scale: 'large',
				 		text: 'Test', 
				 		//cls: 'btn-ok',
						handler: function(event, toolEl, panel){
											form = this.up('panel').down('form').getForm();
											grid = this.up('grid');
											
									Ext.Msg.confirm({
				                        title: 'Confirm',
				                        msg: 'Confermi la verifica di tutti i movimenti?',
				                        icon: Ext.MessageBox.ERROR,
				                        buttons: Ext.Msg.YESNO,
										fn: function(btn){                    
										         if (btn == "no"){ //NO, esco
										           return false;              
										        }
										        if (btn == "yes"){ //YES, proseguo

														Ext.getBody().mask("Loading...");
											
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'import_items', :action=>'test_all') -%>',
															   jsonData: {import_header_id: <%= @ih.id -%>, check_form: form.getValues()},
															   success: function(result, request) {
															   	  var jsonData = Ext.JSON.decode(result.responseText);
															   	  
															   	 	Ext.getBody().unmask();
															   	  
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})		
											                   		//grid.getStore().load();													   	  
															   	  } else {
																    //grid.getStore().load();															   	  
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															  		Ext.getBody().unmask();
															      console.log('server-side failure with status code ' + response.status);
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: 'Errore sconosciuto',
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})						
											                    	grid.getStore().load();									   	  															      
															   }
															});	
												}			
											}
										})

				 		}
				 	}
<% end %>				 	
				 	
				 
				   , {iconCls: 'fa fa-refresh fa-2x', tooltip: 'Refresh', scale: 'large', 
				    	handler: function(event, toolEl, panel){
			                    header_form = this.up('grid').getDockedComponent('toptoolbar').down('form').getForm();
			                    header_form_values = header_form.getValues();

				    			show_imported = header_form.findField('show_imported').getValue();
				    			if (show_imported == true)
				    			 show_imported_out = 1;
				    			else
				    			 show_imported_out = 0;
				    			this.up('grid').store.proxy.extraParams.show_imported = show_imported_out;
				    			this.up('grid').store.proxy.extraParams.flt_num_container = header_form.findField('flt_num_container').getValue();
				    			this.up('grid').store.proxy.extraParams.flt_pos = header_form.findField('flt_pos').getValue();
				    			this.up('grid').store.proxy.extraParams.flt_mossa = header_form.findField('flt_mossa').getValue();
				    											    					 
				 				this.up('grid').getStore().load();
				 		}
				 	}
				 ]
			  }
			],
        	           	    
        	    
			    columns: [{
			        dataIndex: 'container_number',
			        text: 'Seq',
			        width: 50,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '<h5>' + (rowIndex + 1) + '</h5>';
			         return ret;
			        }			        
			    }, {
			        dataIndex: 'container_number',
			        text: 'Container',
			        width: 220,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '<h1 style="margin-top: 0px"><span style="font-size: 8px; color: gray">' + rec.get('hh_type_descr') + '</span><br/>' + rec.get('container_number') + '</h1>';
			         if (Ext.isEmpty(rec.get('open_handling_header_id')) == false){
			          ret += '<h5>Movim #' + rec.get('open_handling_header_id') + '&nbsp;';
			            ret += ' ' + pb_get_image_status(rec.get('open_handling_header_rec').handling_status);
			            ret += ' ' + pb_get_image_in_terminal(rec.get('open_handling_header_rec').container_in_terminal);			            
			            ret += ' ' + pb_get_image_FE(rec.get('open_handling_header_rec').container_FE);
			            ret += ' ' + pb_get_image_with_booking(rec.get('open_handling_header_rec').booking_id);
			            if (Ext.isEmpty(rec.get('open_handling_header_rec').lock_type) == false)
			             ret += ' ' + pb_get_image_lock(rec.get('open_handling_header_rec').lock_type);
			          ret += '</h5>';
			         }
			         return ret;
			        }			        
			    }, {
			        dataIndex: 'container_number',
			        text: 'Dettagli',
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '';
			         ret += '<table class=import_item_detail>';
			         ret += '<tr><th>Armatore</th><td>' + rec.get('shipowner_id_Name') + '</td></tr>';
			         ret += '<tr><th>Equipment</th><td>' + rec.get('equipment_id_Name') + '</td></tr>';
			         ret += '<tr><th>Weight</th><td>' + rec.get('weight') + '</td></tr>';			         
			         ret += '</table>';
			         return ret;
			         
			        }			        	        
			    }, {
			        dataIndex: 'container_number',
			        text: 'Stato/temperatura',
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '';
			         ret += '<table class=import_item_detail>';
			         ret += '<tr><th>Booking</th><td>' + rec.get('num_booking') + '</td></tr>';
			         ret += '<tr><th>Stato</th><td>' + rec.get('container_status') + '</td></tr>';
			         ret += '<tr><th>Temperature</th><td>' + rec.get('temperature') + '</td></tr>';			         
			         ret += '</table>';
			         return ret;
			         
			        }			        	        
			    }, {
			    	text: 'Posizione',
			    	width: 120,
			    	renderer: function(value, metaData, rec){
			    		ret = '<h3>';
			    		if (!Ext.isEmpty(rec.get('sp_pos')))
			    			ret += '<font size=3><b>' + rec.get('sp_pos') + '</b></font>';
			    		if (!Ext.isEmpty(rec.get('sp_mossa')))
			    			ret += '<br>Mossa: ' + rec.get('sp_mossa');
			    		ret += '</h3>';	
			    		return ret;
			    	}
			    }
			    , {
			        text: 'Ok', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	var loc_grid = this;
			        	if (Ext.isEmpty(rec.get('status')) == false) return '';
			            var id = Ext.id();
			            setTimeout(function() {
			            
			                	ok_img = 'fa-check-circle';
			                	btn_class = 'btn-ok';
			                	
			                	//solo per SBARCO, se container vuoto andra' ispezionato
			                	<% if @ih.import_type == 'D' %>
			                	 if (rec.get('container_status') == 'E'){
			                	  ok_img = 'fa-search';
			                	  btn_class = 'btn-warning';
			                	  }
			                	<% end %>
			            
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
								cls: btn_class,
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();
			                        
			                           //costruisco una form
			                           //se ho spuntato 'hide_check' committo subito
			                           //altrimenti mostro la form per la conferma
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                           
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										    {
										            xtype: 'fieldcontainer',
										            fieldLabel: 'Data/Ora',
										            layout: 'hbox',
										            items: [
										                {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},										                 
										            	{xtype: 'datefield', name: 'datetime_op_date', width: 120, value: header_form_values.datetime_op_date},
										            	{xtype: 'timefield', name: 'datetime_op_time', width:  70, value: header_form_values.datetime_op_time},
										            	{xtype: 'hiddenfield', name: 'pier_id', value: header_form_values.pier_id},
										            	{xtype: 'hiddenfield', name: 'gru_id',  value: header_form_values.gru_id},
										            ]
										      }, 
										      {xtype: 'textareafield', name: 'notes', fieldLabel: 'Notes'}										    										    										    
										    ]
										    , 	buttons:
											        [{
											            text: 'Conferma',
											            handler: function (btn, evt) {
											             btn.disable();
											                           
											             form = this.up('form').getForm();
											             tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'import_items', :action=>'set_ok') -%>',
															   jsonData: {rec_id: rec.get('id'), check_form: form.getValues()},
															   success: function(result, request) {
															   	  var jsonData = Ext.JSON.decode(result.responseText);
															   	  
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  
															   	  } else {
																      store.remove(rec);
																      tmp_win.close();															   	  
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: 'Errore sconosciuto',
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  															      
															   }
															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});
										
										//submit con hide_check
										if (header_form.findField('hide_check').getValue() == true){
										 
										 //TODO: ottimizzazione:
										 // eseguire evento sul bottone salva
										 
											Ext.Ajax.request({
											   method: 'POST',
											   url: '<%= url_for(:controller=>'import_items', :action=>'set_ok') -%>',
											   jsonData: {rec_id: rec.get('id'), check_form: loc_form.getValues()},
															   success: function(result, request) {
															   	  var jsonData = Ext.JSON.decode(result.responseText);
															   	  
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  
															   	  } else {
																      store.remove(rec);															   	  
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: 'Errore sconosciuto',
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  															      
															   }

											});
										  		
										  return false;										
										}
										
										
										
			                           loc_win = Ext.create('Ext.window.Window',{
										    layout: 'fit',
										    items: loc_form,
										    title: 'Conferma import',
										    width: 500,
										    height: 300,
										    id: 'myWindow'
										}).show();
													                           			                           
			                           return false;

			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }, {
			        text: 'Danneggiato', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	var loc_grid = this;
			        	if (Ext.isEmpty(rec.get('status')) == false) return '';
			        	
			        	var action_to = 'set_damaged'
			        	if (rec.get('container_status') == 'F')		//i container FULL non vengono riparati
			        		action_to = 'set_ok'
			        				        
			            var id = Ext.id();
			            setTimeout(function() {

			                var buttonRotto = Ext.create('Ext.button.Button', {
								text: '<i class="fa fa-warning fa-3x"></i>',
								cls: 'btn-del',
		                		scale: 'large',			                    
			                        //handler: function(grid, rowIndex, colIndex, a, b) {			                        
			                        handler: function(button, b, c, d, e) {

			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();


		                           //costruisco una form
			                           //se ho spuntato 'hide_check' committo subito
			                           //altrimenti mostro la form per la conferma
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                           
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										    {
										            xtype: 'fieldcontainer',
										            fieldLabel: 'Data/Ora',
										            layout: 'hbox',
										            items: [
										                {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},										                 
										            	{xtype: 'datefield', name: 'datetime_op_date', width: 120, value: header_form_values.datetime_op_date},
										            	{xtype: 'timefield', name: 'datetime_op_time', width:  70, value: header_form_values.datetime_op_time},
										            	{xtype: 'hiddenfield', name: 'pier_id', value: header_form_values.pier_id},
										            	{xtype: 'hiddenfield', name: 'gru_id',  value: header_form_values.gru_id},										            	
										            ]
										      }, 
										      {xtype: 'textareafield', name: 'notes', fieldLabel: 'Notes'}										    										    										    
										    ]
										    , 	buttons:
											        [{
											            text: 'Conferma',
											            handler: function (btn, evt) {
											             btn.disable();
											                           
											             form = this.up('form').getForm();
											             tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'import_items', :action=>'set_damaged') -%>',
															   jsonData: {rec_id: rec.get('id'), check_form: form.getValues()},
															   success: function(result, request) {
															   	  var jsonData = Ext.JSON.decode(result.responseText);
															   	  
															   	  if (jsonData.success == false){
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: jsonData.message,
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  
															   	  } else {
																      store.remove(rec);
																      tmp_win.close();															   	  
															   	  }															   	 
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
																	Ext.MessageBox.show({
												                        title: 'EXCEPTION',
												                        msg: 'Errore sconosciuto',
												                        icon: Ext.MessageBox.ERROR,
												                        buttons: Ext.Msg.OK
											                    	})															   	  															      
															   }

															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});



			                           loc_win = Ext.create('Ext.window.Window',{
										    layout: 'fit',
										    items: loc_form,
										    title: 'Conferma import',
										    width: 500,
										    height: 300,
										    id: 'myWindow'
										}).show();

/*
									   if (rec.get('container_status') == 'F'){
											Ext.MessageBox.show({
						                        title: 'EXCEPTION',
						                        msg: 'Container pieno. Non verra&grave; impostato come DANNEGGIATO',
						                        //icon: Ext.MessageBox.ERROR,
						                        buttons: Ext.Msg.OK
					                    	})									   
									   }
*/									   




			                        }, scope: rec

			                });			                
			                if (Ext.get(id)) {
			                    buttonRotto.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }   
        
        ],
			    
			    

			    
			    listeners: {
					    celldblclick: function(gridView,htmlElement,columnIndex,rec){
					        if (columnIndex == 1) { //doppio click sul num_container... apro il movimento aperto
					        
					        	if (rec.get('open_handling_header_id') !== null){
									new_rec = HandlingHeader.load(rec.get('open_handling_header_id'));
							        newPanel = Ext.create('FeedViewer.MovimentoPanel', {
										title: 'Mov. ' + rec.get('container_number'),
										closable: true			
							        });
							        
			                		newPanel.getViewModel().setData({rec: new_rec, 
			                			is_handling_editable: false,
			                			is_container_editable: false
			                		});
			                    	myApp.feedInfo.add(newPanel).show();
						            myApp.feedInfo.setActiveTab(myApp.feedInfo.items.length - 1);
						        } //se ho un movimento aperto    
					        }
					    }
					}
				    

                        	    
        	}    
   
   
   
  ]
 }
 ]
}