{
 success: true,
 items: [
 {
  xtype: 'container',
  closable: true,
  title: 'Preventivo',
  flex: 1,
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},


  items: [
  
     //INTESTAZIONE (CONTAINER, EQUIPMENT, ....)
	{
	  xtype: 'panel',
	  border: true,
	    layout: {
		    type: 'hbox',
		    pack: 'start',
		    align: 'stretch'
		},
	  bodyStyle: 'background-color: #e0e0e0;',
		
      defaults: {
      	style: 'margin: 10px; padding: 10px;'
      },
	
	  items: [
	     <%= raw "{flex: 1, labelAlign: 'right', xtype: 'textfield', fieldLabel: 'Container', value: #{@item.handling_header.container_number.to_json}}" -%>,
		 <%= raw "{flex: 1, labelAlign: 'right', xtype: 'textfield', fieldLabel: 'Compagnia', value: #{@item.handling_header.shipowner.name.to_json}}" -%>,	     
	     <%= raw "{flex: 1, labelAlign: 'right', xtype: 'textfield', fieldLabel: 'Equipment', value: #{@item.handling_header.equipment.equipment_type.to_json}}" -%>
	  ]
	} //INTESTAZIONE
	

	//GRID ---
   // grid con righe preventivo
		, {
				flex: 1,
				layout: 'fit',
        	    title: '',
        	    tools: [
                ],
        	    xtype: 'gridpanel',
				autoScroll: true,  
				scroll: true,      	    
        	    store: new Ext.data.Store({
        	    	autoLoad: true,
        	    	fields: [],
        	    	proxy: {
        	            url: <%= raw url_for(:controller=>'repair_handling_items', :action=>'get_estimate_items').to_json -%>,
        	            extraParams: {        	            	
        	            	rhi_id: <%= @item.id -%>
        	            },
        	            reader: {
        	                type: 'json',
							method: 'POST',        	                
        	                rootProperty: 'items'
        	            },
        	            paramsAsJson: true,
						method: 'POST',
						type: 'ajax',
			
						//Add these two properties
						actionMethods: {
							read: 'POST'
						},        	            
        	            
        	        }
        	    }),
        	   
 		        	   
        	           	    
        	    
			    columns: [
			     {
			        text: 'Seq',
			        width: 40,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h5>' + (rowIndex + 1) + '</h5>';
			        }			        
			     },
			     {text: "<%= t('tables.repair_prices.repair_processing') -%>",  "dataIndex":"repair_processing_name",  flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '';
			         ret += '<h3>' + value + '</h3>';
			        

			         if (Ext.isEmpty(rec.get('side')) == false){
			         	ret += '<table class=import_item_detail>';
					 	ret += '<tr><th width=100>Dettaglio</th><td width=200>' + rec.get('side') + '&nbsp;</td></tr>';
			         	ret += '</table>';
			         }
			         
					 if (Ext.isEmpty(rec.get('provider_notes')) == false){
					 	ret += '<table>';				         
					 	ret += '<tr><th width=100>Note</th><td>' + rec.get('provider_notes') + '&nbsp;</td></tr>';
					 	ret += '</table>';					 
			         }
			         			         
			         return ret;
			        }			        			     
			     },
			     {text: "<%= t('tables.std.quantity') -%>",  "dataIndex":"quantity",  width: 80, align: 'right',
					renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
								         return '<h3>' + Ext.util.Format.number(value, "0,000.00") + '</h3>';
								        }			     
			     },
			     {text: "<%= t('tables.std.time') -%>",  "dataIndex":"provider_time",  width: 80, align: 'right',
					renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
								         return '<h3>' + Ext.util.Format.number(value, "0,000.00") + '</h3>';
								        }			     
			     },
			     {text: "<%= t('tables.std.material_price') -%>",  "dataIndex":"provider_material_price",  width: 80, align: 'right',
					renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
								         return '<h3>' + Ext.util.Format.number(value, "0,000.00") + '</h3>';
								        }			     
			     },
			     
			    ]
			    
			    
		<% unless params[:only_view] == 'Y' %>	    
			    
			, dockedItems: [
			  {
			    xtype: 'toolbar',
			    dock: 'bottom',
			    width: 135,
				defaults: {
			        xtype: 'button', scale: 'medium', textAlign: 'left'
                },			    
			    margin: '40 10 10 10',
			    items: [
			    	{text: 'Nuova riga', iconCls: 'fa fa-plus fa-2x', cls: 'btn-add', 
			    		handler: function(){
			    			//apro la form per una nuova riga di dettaglio

			 				my_listeners = {
		                		onClose: function(fromWindow){
		                			this.up('grid').store.load();
		                		}, scope: this		                		
		                		
		                	};
						    
						     new_win = acs_show_win_std('Riga preventivo', <%= raw url_for(:controller=>'repair_handling_items', :action=>'estimate_new_row').to_json -%>,
				     	 		{rhi_id: <%= @item.id -%>},
				     	 		500, 400, my_listeners);										
			    			
			    		}
			    	},{xtype: 'tbfill'}, 
			    	{text: 'Chiudi', iconCls: 'fa fa-plus fa-2x', cls: 'btn-close', 
			    		handler: function(){
				    		this.up('window').close();			    			
			    		}
			    	}, 
			    	{text: 'Conferma', iconCls: 'fa fa-plus fa-2x', cls: 'btn-ok',			    	
				    		handler: function(){
							  Ext.MessageBox.confirm('Richieta conferma', 'Confermi la chiusura e l\'invio del preventivo?', function(btn){
							   if(btn === 'yes'){				    		
					    		this.up('window').fireEvent('onConfirm', this.up('window'));
					    		}
					    	  }, this);			    			
				    		}
				    	
			    	}			    	
			    ]
			  }
			 ]

		<% end %>	    

				    

                        	    
        	}    
 	
	//--- GRID
     
  
  ]
 }
 ]
}