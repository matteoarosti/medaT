{
 success: true,
 items: [
 {
  xtype: 'container',
  closable: true,
  title: 'Preventivo',
  flex: 1,
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},


  items: [
  
     //INTESTAZIONE (CONTAINER, EQUIPMENT, ....)
	{
	  xtype: 'panel',
	  border: true,
	    layout: {
		    type: 'hbox',
		    pack: 'start',
		    align: 'stretch'
		},
	  bodyStyle: 'background-color: #e0e0e0;',
		
      defaults: {
      	style: 'margin: 10px; padding: 10px;'
      },
	
	  items: [
	     <%= raw "{flex: 1, labelAlign: 'right', xtype: 'textfield', fieldLabel: 'Container', value: #{@item.handling_header.container_number.to_json}}" -%>,
		 <%= raw "{flex: 1, labelAlign: 'right', xtype: 'textfield', fieldLabel: 'Compagnia', value: #{@item.handling_header.shipowner.name.to_json}}" -%>,	     
	     <%= raw "{flex: 1, labelAlign: 'right', xtype: 'textfield', fieldLabel: 'Equipment', value: #{@item.handling_header.equipment.equipment_type.to_json}}" -%>
	  ]
	} //INTESTAZIONE
	

	//GRID ---
   // grid con righe preventivo
		, {
				flex: 1,
				layout: 'fit',
        	    title: '',
        	    features: [{
        			ftype: 'summary'
    			}],
        	    tools: [
                ],
        	    xtype: 'gridpanel',
				autoScroll: true,  
				scroll: true,
				
				viewConfig: {
				    	getRowClass: function(record, rowIndex, rowParams, store){
				        	if (record.get('confirmed') == 0)
				        	  return 'canceled';
				    	}
				},				
				
        	    store: new Ext.data.Store({
        	    	autoLoad: true,
        	    	fields: [
        	    		//definisco altrimenti non funziona correttamente summary
        	    		{name: 'provider_time', 			type: 'float'},
        	    		{name: 'provider_material_price', 	type: 'float'},
        	    		{name: 'customer_time', 			type: 'float'},
        	    		{name: 'customer_material_price', 	type: 'float'},
        	    		
						{name: 't_row_provider_time', type: 'float',
						    			convert: function(val,row) {
						    				return row.data.quantity * row.data.provider_time;
						    			}	        	    		
        	    		}, {name: 't_row_provider_time_cost', type: 'float',
						    			convert: function(val,row) {
						    				return row.data.quantity * row.data.provider_time * row.data.provider_hourly_cost;
						    			}	        	    		
        	    		}, {name: 't_row_provider_material_price', type: 'float',
						    			convert: function(val,row) {
						    				return row.data.quantity * row.data.provider_material_price;
						    			}	        	    		
        	    		}, {name: 't_row_customer_time', type: 'float',
						    			convert: function(val,row) {
						    				return row.data.quantity * row.data.customer_time;
						    			}	        	    		
        	    		}, {name: 't_row_customer_time_cost', type: 'float',
						    			convert: function(val,row) {
						    				return row.data.quantity * row.data.customer_time * row.data.customer_hourly_cost;
						    			}	        	    		
        	    		}, {name: 't_row_customer_material_price', type: 'float',
						    			convert: function(val,row) {
						    				return row.data.quantity * row.data.customer_material_price;
						    			}	        	    		
        	    		}
        	    	],
        	    	proxy: {
        	            url: <%= raw url_for(:controller=>'repair_handling_items', :action=>'get_estimate_items').to_json -%>,
        	            extraParams: {        	            	
        	            	rhi_id: <%= @item.id -%>
        	            },
        	            reader: {
        	                type: 'json',
							method: 'POST',        	                
        	                rootProperty: 'items'
        	            },
        	            paramsAsJson: true,
						method: 'POST',
						type: 'ajax',
			
						//Add these two properties
						actionMethods: {
							read: 'POST'
						},        	            
        	            
        	        }
        	    }),
        	   
 		        	   
        	           	    
        	    
			    columns: [
			     {
			        text: 'Seq',
			        width: 40,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h5>' + (rowIndex + 1) + '</h5>';
			        }			        
			     },
			     {text: "<%= t('tables.repair_prices.repair_processing') -%>",  "dataIndex":"repair_processing_name",  flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '';
			         ret += '<h3>'
			         ret += value
<% if User.current.admin_can?(:repair, :table) %>			         
			         ret += '<br/>[ ' + rec.get('code1_code2') + ' ]'
<% end %>			         			         
			         ret += '</h3>';

			        

			         if (Ext.isEmpty(rec.get('side')) == false){
			         	ret += '<table class=import_item_detail>';
					 	ret += '<tr><th width=100>Dettaglio</th><td width=200>' + rec.get('side') + '&nbsp;</td></tr>';
			         	ret += '</table>';
			         }
			         
					 if (Ext.isEmpty(rec.get('provider_notes')) == false){
					 	ret += '<table>';				         
					 	ret += '<tr><th width=100>Note</th><td>' + rec.get('provider_notes') + '&nbsp;</td></tr>';
					 	ret += '</table>';					 
			         }
			         
			         if (Ext.isEmpty(rec.get('authorization_notes')) == false){
					 	ret += '<table>';				         
					 	ret += '<tr><th width=100>Note Autorizzazione</th><td>' + rec.get('authorization_notes') + '&nbsp;</td></tr>';
					 	ret += '</table>';					 
			         }
			         			         
			         return ret;
			        }			        			     
			     },
			     {text: "<%= t('tables.std.quantity') -%>",  "dataIndex":"quantity",  width: 70, align: 'right',
					renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
								         return '<h3>' + Ext.util.Format.number(value, "0,000.00") + '</h3>';
								        }			     
			     },
			     
			     //costo da fornitore
			     {text: 'Da fornitore',
			      columns: [
			        {text: 'Tar.Oraria', dataIndex: "provider_hourly_cost", width: 70, align: 'right', renderer: function(value, metaData, rec){
			        		return '<h4>' + Ext.util.Format.number(value, "0,000.00") + '</h4>';
			        	}
			        }, 
			     	{text: "<%= t('tables.std.time') -%>",  "dataIndex":"t_row_provider_time",  width: 70, align: 'right',
			     	    summaryType: function(records, values){

								ret = 0;							    
							    Ext.each(records || [], function(rec) {
							      if (rec.get('confirmed') != false)
						            ret = ret + rec.get('t_row_provider_time_cost');
						        }, this);
							    
							    return ret;

							},
			     	    summaryRenderer: function(value, summaryData, dataIndex) {
                			return '<h2>' + Ext.util.Format.number(value, "0,000.00") + '</h2>';
            			},
						renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
								         ret = '<h3>' + Ext.util.Format.number(rec.get('t_row_provider_time_cost'), "0,000.00") + '</h3>';
								         ret = ret + '<span>' + Ext.util.Format.number(value, "0,000.00h") + '</span>';
								         return ret;
								        }			     
			     	},
			     	{text: "<%= t('tables.std.material_price_short') -%>",  "dataIndex":"t_row_provider_material_price",  width: 70, align: 'right',
			     	    //summaryType: 'sum',
			     	    summaryType: function(records, values){

								ret = 0;							    
							    Ext.each(records || [], function(rec) {
							      if (rec.get('confirmed') != false)
						            ret = ret + rec.get('t_row_provider_material_price');
						        }, this);
							    
							    return ret;

							},
			     	    summaryRenderer: function(value, summaryData, dataIndex) {
                			return '<h2>' + Ext.util.Format.number(value, "0,000.00") + '</h2>';
            			},			     	
						renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
								         return '<h3>' + Ext.util.Format.number(value, "0,000.00") + '</h3>';
								        }			     
			     	}]
			     },
			     
<% if User.current.admin_can?(:repair, :table) %>			     
			     //costo per cliente
			     {text: 'A compagnia',
			      columns: [			 
			        {text: 'Tar.Oraria', dataIndex: "customer_hourly_cost", align: 'right', width: 70, renderer: function(value, metaData, rec){
			        		return '<h4>' + Ext.util.Format.number(value, "0,000.00") + '</h4>';
			        	}
			        },
			     	{text: "<%= t('tables.std.time') -%>",  "dataIndex":"t_row_customer_time",  width: 70, align: 'right',
			     	    //summaryType: 'sum',
			     	    summaryType: function(records, values){

								ret = 0;							    
							    Ext.each(records || [], function(rec) {
							      if (rec.get('confirmed') != false)
						            ret = ret + rec.get('t_row_customer_time_cost');
						        }, this);
							    
							    return ret;

							},
			     	    summaryRenderer: function(value, summaryData, dataIndex) {
                			return '<h2 style=\'align: right;\'>' + Ext.util.Format.number(value, "0,000.00") + '</h2>';
            			},			     	
						renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
								         ret = '<h3>' + Ext.util.Format.number(rec.get('t_row_customer_time_cost'), "0,000.00") + '</h3>';
								         ret = ret + '<span>' + Ext.util.Format.number(value, "0,000.00h") + '</span>';
								         return ret;
								        }			     
			     	},
			     	{text: "<%= t('tables.std.material_price_short') -%>",  "dataIndex":"t_row_customer_material_price",  width: 70, align: 'right',
			     	    //summaryType: 'sum',
			     	    summaryType: function(records, values){

								ret = 0;							    
							    Ext.each(records || [], function(rec) {
							      if (rec.get('confirmed') != false)
						            ret = ret + rec.get('t_row_customer_material_price');
						        }, this);
							    
							    return ret;

							},
			     	    summaryRenderer: function(value, summaryData, dataIndex, a, b) {
                			return '<h2>' + Ext.util.Format.number(value, "0,000.00") + '</h2>';
            			},			     	
						renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
								         return '<h3>' + Ext.util.Format.number(value, "0,000.00") + '</h3>';
								        }			     
			     	}]
			     }
<% end %>			     
			     
			     
			     
			     
			     <% if params[:authorizing] == 'Y' %>
			     
			     
				  , {
			        text: <%= raw t('forms.std.cancel').to_json -%>, width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			        			        			        
			        	var loc_grid = this;
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            			          
			                ok_img = 'fa-close';
			                
			                if (rec.get('confirmed') == 0)
			                	return '';
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
		                		scale: 'large',
		                		cls: 'btn-del',	                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();
			                        
			                           //costruisco una form
			                           
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										      {xtype: 'hiddenfield', name: 'rhi_id', value: rec.get('id')},
										      {xtype: 'textareafield', name: 'authorization_notes', fieldLabel: 'Notes', flex: 1}										    										    										    
										    ]
										    , 	buttons:
											        [{
											            text: <%= raw t('forms.to_be_handled.confirm').to_json -%>,
											            cls: 'btn-del',
											            handler: function (btn, evt) {
											             btn.disable();
											                           
											             form = this.up('form').getForm();
											             tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'repair_handling_items', :action=>'estimate_cancel_row') -%>',
															   jsonData: {
															   	data: form.getValues()
															   },
															   success: function(response, opts) {
															      store.remove(rec);
															      store.load();
															      tmp_win.close();
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
															   }
															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});
										
										
			                           loc_win = Ext.create('Ext.window.Window',{
										    layout: 'fit',
										    items: loc_form,
										    title: <%= raw t('forms.std.cancel_confirm').to_json -%>,
										    width: 500,
										    height: 300,
										    id: 'myWindow'
										}).show();
													                           			                           
			                           return false;

			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }
			     
			     			     
			     
			     
			     
			     <% end %>
			     
			     
			    ]
			    
			    
		<% unless params[:only_view] == 'Y' %>	    
			    
			, dockedItems: [
			  {
			    xtype: 'toolbar',
			    dock: 'bottom',
			    width: 135,
				defaults: {
			        xtype: 'button', scale: 'medium', textAlign: 'left'
                },			    
			    margin: '40 10 10 10',
			    items: [
			    	{text: 'Nuova riga', iconCls: 'fa fa-plus fa-2x', cls: 'btn-add', 
			    		handler: function(){
			    			//apro la form per una nuova riga di dettaglio

			 				my_listeners = {
		                		onClose: function(fromWindow){
		                			this.up('grid').store.load();
		                		}, scope: this		                		
		                		
		                	};
						    
						     new_win = acs_show_win_std('Riga preventivo', <%= raw url_for(:controller=>'repair_handling_items', :action=>'estimate_new_row').to_json -%>,
				     	 		{rhi_id: <%= @item.id -%>},
				     	 		500, 400, my_listeners);										
			    			
			    		}
			    	},{xtype: 'tbfill'}, 
			    	{text: 'Chiudi', iconCls: 'fa fa-plus fa-2x', cls: 'btn-close', 
			    		handler: function(){
				    		this.up('window').close();			    			
			    		}
			    	}, 
			    	{text: 'Conferma', iconCls: 'fa fa-plus fa-2x', cls: 'btn-ok',			    	
				    		handler: function(){
							  Ext.MessageBox.confirm('Richieta conferma', 'Confermi la chiusura e l\'invio del preventivo?', function(btn){
							   if(btn === 'yes'){				    		
					    		this.up('window').fireEvent('onConfirm', this.up('window'));
					    		}
					    	  }, this);			    			
				    		}
				    	
			    	}			    	
			    ]
			  }
			 ]

		, listeners : {
		    itemdblclick: function(dv, rec, item, index, e) {						    	
 				my_listeners = {
            		onClose: function(fromWindow){
            			dv.up('grid').store.load();
            		}, scope: this		                		
            	};
			    
			     new_win = acs_show_win_std('Riga preventivo', <%= raw url_for(:controller=>'repair_handling_items', :action=>'estimate_edit_row').to_json -%>,
	     	 		{rhi_id: <%= @item.id -%>, rhi_row_id: rec.get('id')},
	     	 		500, 400, my_listeners);										

		    }, scope: this
		} //listeners


		<% end %>	    

                        	    
        	}    
 	
	//--- GRID
     
  
  ]
 }
 ]
}