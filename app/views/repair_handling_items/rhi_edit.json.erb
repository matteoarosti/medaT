{
 success: true,
 items: [
 {
  xtype: 'container',
  itemId: 'tab_panel',
  closable: true,
  title: 'Repair',
  flex: 1,
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},


	viewModel: {
			data: {
				rec: <%= raw @item.to_json(RepairHandlingItem.as_json_prop) -%>,
				enable_operations: <%= raw @item.enable_operations_list.to_json -%>
			}
			
			, test_with_note: function(note){
			  			cls = 'fa fa-2x fa-file-text-o';
    		        	 if (Ext.isEmpty(note) == false)
    		        	 	cls = cls + " with-note";
    		        	  else
    		        		cls = cls + " with-no-note";    
    		        	
    		        	return cls;			  
			}
			
    		, formulas: {    		    			  

    		        with_note_in_garage:{
    		          bind: {bindTo: '{rec}'},
    		          get: function (rec) {
    		            return this.test_with_note(rec.in_garage_notes)
    		        }
    		       },
    		        with_note_estimate:{
    		          bind: {bindTo: '{rec}'},
    		          get: function (rec) {
    		            return this.test_with_note(rec.estimate_notes)
    		        }
    		       },
    		        with_note_estimate_sent:{
    		          bind: {bindTo: '{rec}'},
    		          get: function (rec) {
    		            return this.test_with_note(rec.estimate_sent_notes)
    		        }
    		       },
    		        with_note_estimate_authorized:{
    		          bind: {bindTo: '{rec}'},
    		          get: function (rec) {
    		            return this.test_with_note(rec.estimate_authorized_notes)
    		        }
    		       },
    		        with_note_repair_completed:{
    		          bind: {bindTo: '{rec}'},
    		          get: function (rec) {
    		            return this.test_with_note(rec.repair_completed_notes)
    		        }
    		       },
    		        with_note_out_garage:{
    		          bind: {bindTo: '{rec}'},
    		          get: function (rec) {
    		            return this.test_with_note(rec.out_garage_notes)
    		        }
    		       }
    		       
    		       
    		       
    		       
    		       
    		
    		} //formulas
			
			    			
	},    


  items: [
  
     //INTESTAZIONE (CONTAINER, EQUIPMENT, ....)
	{
	  xtype: 'panel',
	  border: true,
	    layout: {
		    type: 'hbox',
		    pack: 'start',
		    align: 'stretch'
		},
	  bodyStyle: 'background-color: #e0e0e0;',
		
      defaults: {
      	style: 'margin: 10px; padding: 10px;'
      },
	
	  items: [
	     <%= raw "{flex: 1, labelAlign: 'top', xtype: 'textfield', fieldLabel: 'Container', value: #{@item.handling_header.container_number.to_json}}" -%>,
		 <%= raw "{flex: 1, labelAlign: 'top', xtype: 'textfield', fieldLabel: 'Compagnia', value: #{@item.handling_header.shipowner.name.to_json}}" -%>,	     
	     <%= raw "{flex: 1, labelAlign: 'top', xtype: 'textfield', fieldLabel: 'Equipment', value: #{@item.handling_header.equipment.equipment_type.to_json}}" -%>
	  ]
	} //INTESTAZIONE
	
	, 
	
	//TABLE LAYOUT (3 columns)
	{
	  xtype: 'panel',
	  flex: 1,
	    layout: {
		    type: 'table',
		    columns: 3,
		    tableAttrs: {
		        style: {
		            width: '100%',
		            height: '100%'
		        }
    		}
		},
		
        defaults: {
			xtype: 'panel', border: false,     
            // applied to each contained panel
            bodyStyle:'padding:10px; border: 0px;',
            style: 'margin: 10px; padding: 10px; border: 1px solid grey; border-top: 10px solid grey;',
            border: true,
			layout: {
				    type: 'vbox',
				    pack: 'start',
				    align: 'stretch'
			}
            
        },		
	
	  items: [

			//IN GARAGE
			{			  			  			
			  items: [
				{html: '<h2>Ingresso in officina</h2>'},
				{xtype: 'textfield', fieldLabel: 'Portato il', bind: '{rec.in_garage_at:date("d/m/Y H:i")}'},
				{xtype: 'textfield', fieldLabel: 'Portato da', bind: '{rec.in_garage_user_name}'}
			  ]
			  
        	  , dockedItems: [
        	   { 
        	    defaults: {scale: 'medium'},
        	    xtype: 'toolbar', dock: 'bottom',
        	    items: [
						{iconCls: '', text: 'Imposta/Modifica', bind: {disabled: '{!enable_operations.in_garage_modify}'}, 
							handler: function(event, toolEl, panel){ 
				 			}
				 		},
				 		{xtype: 'tbfill'},{scale: 'medium', cls: 'btn-ok', iconCls: 'fa fa-2x fa-thumbs-o-up', text: '', 
				 			bind: {visible: '{rec.in_garage_at}'}
				 		},{scale: 'medium', cls: '', iconCls: '', text: '', bind: {iconCls: '{with_note_in_garage}'},
					 		handler: function(event, toolEl, panel){
                            	acs_show_win_std('Modifica nota', myApp.railsBaseUri + 'repair_handling_items/edit_notes',
     			                		 {rec_id: <%= @item.id -%>, note_field: 'in_garage_notes'},
     			                		 600, 300);
					 			 
					 		}
				 		}	        	    
        	    ]
        	   }
        	  ]
			  
			} //IN GARAGE



			//PREVENTIVO REDATTO
			, {		
			  colspan: 1,	  			  			
			  items: [
				{html: '<h2>Redazione preventivo</h2>'},
				{xtype: 'textfield', fieldLabel: 'Redatto il', bind: '{rec.estimate_at:date("d/m/Y H:i")}'},
				{xtype: 'textfield', fieldLabel: 'Redatto da', bind: '{rec.estimate_user_name}'}
			  ]
			  
        	  , dockedItems: [
        	   { 
        	    defaults: {scale: 'medium'},        	   
        	    xtype: 'toolbar', dock: 'bottom',
        	    items: [
						{iconCls: '',  text: 'Crea/modifica', bind: {disabled: '{!enable_operations.estimate_modify}'},
						
						    handler: function(event, toolEl, panel){

			 				my_listeners = {
		                		onConfirm: function(fromWindow){

									Ext.Ajax.request({
					                    url: <%= raw url_for(:controller=>'repair_handling_items', :action=>'set_estimate').to_json -%>,
					                    waitMsg: 'Salvataggio in corso....',
										method:'POST',                     
					                    jsonData: {rec_id: <%= @item.id -%>},	
					             	
										success: function(result, request) {					
											var returnData = Ext.JSON.decode(result.responseText);
	
											if (returnData.success == false){
												Ext.MessageBox.show({
							                        title: 'EXCEPTION',
							                        msg: returnData.message,
							                        icon: Ext.MessageBox.ERROR,
							                        buttons: Ext.Msg.OK
						                    	})
						                      return false;										
											}
											
											//aggiorno il record per il bind e operation_list
											tab_panel = this.up('container[itemId=tab_panel]');
											rec = returnData.data[0];																				
											tab_panel.getViewModel().setData({rec: rec});
											tab_panel.getViewModel().setData({enable_operations: returnData.enable_operations});
											fromWindow.close();
										}, scope: this,
										
										failure: function(rec, op) {
											alert('error');
											var result = Ext.JSON.decode(op.getResponse().responseText);
											Ext.MessageBox.show({
						                        title: 'EXCEPTION',
						                        msg: result.message,
						                        icon: Ext.MessageBox.ERROR,
						                        buttons: Ext.Msg.OK
					                    	})					
										}, scope: this,						
														 
							    	});


		                			

		                		}, scope: this		                		
		                	}

						    
						     new_win = acs_show_win_std('Dettaglio Preventivo', <%= raw url_for(:controller=>'repair_handling_items', :action=>'estimate_edit').to_json -%>,
				     	 		{rhi_id: <%= @item.id -%>},
				     	 		900, 650, my_listeners, null, 'Y');										
						     
						    },
						
				 		}, {iconCls: '',  text: 'Visualizza',
							handler: function(event, toolEl, panel){
							 my_listeners = {}
						     new_win = acs_show_win_std('Dettaglio Preventivo', <%= raw url_for(:controller=>'repair_handling_items', :action=>'estimate_edit').to_json -%>,
				     	 		{rhi_id: <%= @item.id -%>, only_view: 'Y'},
				     	 		900, 650, my_listeners);										
							  
				 			}
				 		}, {xtype: 'tbfill'},{scale: 'medium', cls: 'btn-ok', iconCls: 'fa fa-2x fa-thumbs-o-up', text: '', 
				 			bind: {visible: '{rec.estimate_at}'}
				 		},{scale: 'medium', cls: '', iconCls: '', text: '', bind: {iconCls: '{with_note_estimate}'},
					 		handler: function(event, toolEl, panel){
                            	acs_show_win_std('Modifica nota', myApp.railsBaseUri + 'repair_handling_items/edit_notes',
     			                		 {rec_id: <%= @item.id -%>, note_field: 'estimate_notes'},
     			                		 600, 300);					 			 
					 		}				 		
				 		}
				 		
        	    ]
        	   }
        	  ]
			  
			} //REDATTO
		

		
		
		

			//INVIATO A COMPAGNIA
			, {		
			  colspan: 1,	  			  			
			  items: [
				{html: '<h2>Inviato a compagnia</h2>'},
				{xtype: 'textfield', fieldLabel: 'Inviato il', bind: '{rec.estimate_sent_at:date("d/m/Y H:i")}'},
				{xtype: 'textfield', fieldLabel: 'Inviato da', bind: '{rec.estimate_sent_user_name}'}
			  ]
			  
        	  , dockedItems: [
        	   { 
        	    defaults: {scale: 'medium'},        	   
        	    xtype: 'toolbar', dock: 'bottom',
        	    items: [
						{iconCls: '',  text: 'Inviato', bind: {disabled: '{!enable_operations.estimate_sent_modify}'},				 		
							handler: function(event, toolEl, panel){
							  Ext.MessageBox.confirm('Richieta conferma', 'Confermi operazione?', function(btn){
							   if(btn === 'yes'){
								Ext.Ajax.request({
				                    url: <%= raw url_for(:controller=>'repair_handling_items', :action=>'set_estimate_sent').to_json -%>,
				                    waitMsg: 'Salvataggio in corso....',
									method:'POST',                     
				                    jsonData: {rec_id: <%= @item.id -%>},	
				             	
									success: function(result, request) {					
										var returnData = Ext.JSON.decode(result.responseText);

										if (returnData.success == false){
											Ext.MessageBox.show({
						                        title: 'EXCEPTION',
						                        msg: returnData.message,
						                        icon: Ext.MessageBox.ERROR,
						                        buttons: Ext.Msg.OK
					                    	})
					                      return false;										
										}
										
										//aggiorno il record per il bind e operation_list
										tab_panel = this.up('container[itemId=tab_panel]');
										rec = returnData.data[0];																				
										tab_panel.getViewModel().setData({rec: rec});
										tab_panel.getViewModel().setData({enable_operations: returnData.enable_operations});
									}, scope: this,
									
									failure: function(rec, op) {
										alert('error');
										var result = Ext.JSON.decode(op.getResponse().responseText);
										Ext.MessageBox.show({
					                        title: 'EXCEPTION',
					                        msg: result.message,
					                        icon: Ext.MessageBox.ERROR,
					                        buttons: Ext.Msg.OK
				                    	})					
									}, scope: this,						
													 
						    	});							   
							   } //btn == 'yes'
							  }, this); 

				 			}
				 		}, {xtype: 'tbfill'},{scale: 'medium', cls: 'btn-ok', iconCls: 'fa fa-2x fa-thumbs-o-up', text: '', 
				 			bind: {visible: '{rec.estimate_sent_at}'}
				 		},{scale: 'medium', cls: '', iconCls: '', text: '', bind: {iconCls: '{with_note_estimate_sent}'},
					 		handler: function(event, toolEl, panel){
                            	acs_show_win_std('Modifica nota', myApp.railsBaseUri + 'repair_handling_items/edit_notes',
     			                		 {rec_id: <%= @item.id -%>, note_field: 'estimate_sent_notes'},
     			                		 600, 300);					 			 
					 		}				 		
				 		}
				 		
        	    ]
        	   }
        	  ]
			  
			} //INVIATO A COMPAGNIA
		
		
		
		



			//AUTORIZZATO (da shipowner)
			, {			  			  			
			  items: [
				{html: '<h2>Autorizzazione del preventivo</h2>'},
				{xtype: 'textfield', fieldLabel: 'Autorizzato il', bind: '{rec.estimate_authorized_at:date("d/m/Y H:i")}'},
				{xtype: 'textfield', fieldLabel: 'Autorizzato da', bind: '{rec.estimate_authorized_user_name}'}
			  ]
			  
        	  , dockedItems: [
        	   { 
        	    defaults: {scale: 'medium'},        	   
        	    xtype: 'toolbar', dock: 'bottom',
        	    items: [
        	    
						{iconCls: '',  text: 'Autorizza/modifica', bind: {disabled: '{!enable_operations.estimate_authorized_modify}'},
						
						    handler: function(event, toolEl, panel){

			 				my_listeners = {
		                		onConfirm: function(fromWindow){

									Ext.Ajax.request({
					                    url: <%= raw url_for(:controller=>'repair_handling_items', :action=>'set_authorized').to_json -%>,
					                    waitMsg: 'Salvataggio in corso....',
										method:'POST',                     
					                    jsonData: {rec_id: <%= @item.id -%>},	
					             	
										success: function(result, request) {					
											var returnData = Ext.JSON.decode(result.responseText);
	
											if (returnData.success == false){
												Ext.MessageBox.show({
							                        title: 'EXCEPTION',
							                        msg: returnData.message,
							                        icon: Ext.MessageBox.ERROR,
							                        buttons: Ext.Msg.OK
						                    	})
						                      return false;										
											}
											
											//aggiorno il record per il bind e operation_list
											tab_panel = this.up('container[itemId=tab_panel]');
											rec = returnData.data[0];																				
											tab_panel.getViewModel().setData({rec: rec});
											tab_panel.getViewModel().setData({enable_operations: returnData.enable_operations});
											fromWindow.close();
										}, scope: this,
										
										failure: function(rec, op) {
											alert('error');
											var result = Ext.JSON.decode(op.getResponse().responseText);
											Ext.MessageBox.show({
						                        title: 'EXCEPTION',
						                        msg: result.message,
						                        icon: Ext.MessageBox.ERROR,
						                        buttons: Ext.Msg.OK
					                    	})					
										}, scope: this,						
														 
							    	});


		                			

		                		}, scope: this		                		
		                	}

						    
						     new_win = acs_show_win_std('Dettaglio Preventivo', <%= raw url_for(:controller=>'repair_handling_items', :action=>'estimate_edit').to_json -%>,
				     	 		{rhi_id: <%= @item.id -%>, authorizing: 'Y'},
				     	 		900, 650, my_listeners);										
						     
						    },
						
				 		}, {xtype: 'tbfill'},{scale: 'medium', cls: 'btn-ok', iconCls: 'fa fa-2x fa-thumbs-o-up', text: '', 
				 			bind: {visible: '{rec.estimate_authorized_at}'}
				 		}, {scale: 'medium', cls: '', iconCls: '', text: '', bind: {iconCls: '{with_note_estimate_authorized}'},
					 		handler: function(event, toolEl, panel){
                            	acs_show_win_std('Modifica nota', myApp.railsBaseUri + 'repair_handling_items/edit_notes',
     			                		 {rec_id: <%= @item.id -%>, note_field: 'estimate_authorized_notes'},
     			                		 600, 300);					 			 
					 		}				 		
				 		}        	    
        	    ]
        	   }
        	  ]
			  
			} //AUTORIZZATO
		
		
		
		

			//CONTAINER RIPARATO
			, {			  			  			
			  items: [
				{html: '<h2>Riparazione eseguita</h2>'},
				{xtype: 'textfield', fieldLabel: 'Riparato il', bind: '{rec.repair_completed_at:date("d/m/Y H:i")}'},
				{xtype: 'textfield', fieldLabel: 'Riparato da', bind: '{rec.repair_completed_user_name}'}
			  ]
			  
        	  , dockedItems: [
        	   { 
        	    defaults: {scale: 'medium'},        	   
        	    xtype: 'toolbar', dock: 'bottom',
        	    items: [
						{iconCls: '', text: 'Imposta/Modifica', bind: {disabled: '{!enable_operations.repair_completed_modify}'},
							handler: function(event, toolEl, panel){
							  Ext.MessageBox.confirm('Richieta conferma', 'Confermi operazione?', function(btn){
							   if(btn === 'yes'){
								Ext.Ajax.request({
				                    url: <%= raw url_for(:controller=>'repair_handling_items', :action=>'set_repair_completed').to_json -%>,
				                    waitMsg: 'Salvataggio in corso....',
									method:'POST',                     
				                    jsonData: {rec_id: <%= @item.id -%>},	
				             	
									success: function(result, request) {					
										var returnData = Ext.JSON.decode(result.responseText);

										if (returnData.success == false){
											Ext.MessageBox.show({
						                        title: 'EXCEPTION',
						                        msg: returnData.message,
						                        icon: Ext.MessageBox.ERROR,
						                        buttons: Ext.Msg.OK
					                    	})
					                      return false;										
										}
										
										//aggiorno il record per il bind e operation_list
										tab_panel = this.up('container[itemId=tab_panel]');
										rec = returnData.data[0];																				
										tab_panel.getViewModel().setData({rec: rec});
										tab_panel.getViewModel().setData({enable_operations: returnData.enable_operations});
									}, scope: this,
									
									failure: function(rec, op) {
										alert('error');
										var result = Ext.JSON.decode(op.getResponse().responseText);
										Ext.MessageBox.show({
					                        title: 'EXCEPTION',
					                        msg: result.message,
					                        icon: Ext.MessageBox.ERROR,
					                        buttons: Ext.Msg.OK
				                    	})					
									}, scope: this,						
													 
						    	});							   
							   } //btn == 'yes'
							  }, this); 

				 			} //handler
				 		},
				 		{xtype: 'tbfill'},{scale: 'medium', cls: 'btn-ok', iconCls: 'fa fa-2x fa-thumbs-o-up', text: '', 
				 			bind: {visible: '{rec.repair_completed_at}'}
				 		}, {scale: 'medium', cls: '', iconCls: '', text: '', bind: {iconCls: '{with_note_repair_completed}'},
					 		handler: function(event, toolEl, panel){
                            	acs_show_win_std('Modifica nota', myApp.railsBaseUri + 'repair_handling_items/edit_notes',
     			                		 {rec_id: <%= @item.id -%>, note_field: 'repair_completed_notes'},
     			                		 600, 300);					 			 
					 		}				 		
				 		}        	    
        	    ]
        	   }
        	  ]
			  
			} //RIPARATO
		
		


			//CONTAINER RIPORTATO IN TERMINAL
			, {			  			  			
			  items: [
				{html: '<h2>Ritorno in terminal</h2>'},
				{xtype: 'textfield', fieldLabel: 'In terminal il', bind: '{rec.out_garage_at:date("d/m/Y H:i")}'},
				{xtype: 'textfield', fieldLabel: 'In terminal da', bind: '{rec.out_garage_user_name}'}
			  ]
			  
        	  , dockedItems: [
        	   { 
        	    defaults: {scale: 'medium'},        	   
        	    xtype: 'toolbar', dock: 'bottom',
        	    items: [
						{iconCls: '', text: 'Imposta/Modifica', bind: {disabled: '{!enable_operations.out_garage_modify}'}, 
							handler: function(event, toolEl, panel){
							  Ext.MessageBox.confirm('Richieta conferma', 'Confermi operazione?', function(btn){
							   if(btn === 'yes'){
								Ext.Ajax.request({
				                    url: <%= raw url_for(:controller=>'repair_handling_items', :action=>'set_out_garage').to_json -%>,
				                    waitMsg: 'Salvataggio in corso....',
									method:'POST',                     
				                    jsonData: {rec_id: <%= @item.id -%>},	
				             	
									success: function(result, request) {					
										var returnData = Ext.JSON.decode(result.responseText);

										if (returnData.success == false){
											Ext.MessageBox.show({
						                        title: 'EXCEPTION',
						                        msg: returnData.message,
						                        icon: Ext.MessageBox.ERROR,
						                        buttons: Ext.Msg.OK
					                    	})
					                      return false;										
										}
										
										//aggiorno il record per il bind e operation_list
										tab_panel = this.up('container[itemId=tab_panel]');
										rec = returnData.data[0];																				
										tab_panel.getViewModel().setData({rec: rec});
										tab_panel.getViewModel().setData({enable_operations: returnData.enable_operations});
									}, scope: this,
									
									failure: function(rec, op) {
										alert('error');
										var result = Ext.JSON.decode(op.getResponse().responseText);
										Ext.MessageBox.show({
					                        title: 'EXCEPTION',
					                        msg: result.message,
					                        icon: Ext.MessageBox.ERROR,
					                        buttons: Ext.Msg.OK
				                    	})					
									}, scope: this,						
													 
						    	});							   
							   } //btn == 'yes'
							  }, this); 
							 
				 			} //handler
				 		},
				 		{xtype: 'tbfill'},{scale: 'medium', cls: 'btn-ok', iconCls: 'fa fa-2x fa-thumbs-o-up', text: '', 
				 			bind: {visible: '{rec.out_garage_at}'}
				 		}, {scale: 'medium', cls: '', iconCls: '', text: '', bind: {iconCls: '{with_note_out_garage}'},
					 		handler: function(event, toolEl, panel){
                            	acs_show_win_std('Modifica nota', myApp.railsBaseUri + 'repair_handling_items/edit_notes',
     			                		 {rec_id: <%= @item.id -%>, note_field: 'out_garage_notes'},
     			                		 600, 300);					 			 
					 		}				 		
				 		}
        	    ]
        	   }
        	  ]
			  
			} //RIPORTATO IN TERMINAL
	     

	  ]
	} //INTESTAZIONE
	
     
  
  ]
 }
 ]
}