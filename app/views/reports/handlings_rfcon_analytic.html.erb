<style type="text/css">
<!--
@page { size:auto; margin: 1cm }
-->
</style>

<style media="print">
 h1.medaT-report{padding: 0px 0px; margin: 0px 0px; font-size: 13px;}
 table.medaT-report tr td, table.medaT-report tr th{font-size: 9px; padding: 0px 2px}
</style>


<h1 class=medaT-report>Handling Analitica</h1>

<%
#Recupero elenco movimenti in base ai parametri

formValues = JSON.parse params['formValues']


#gestione campi data/ora
if !formValues['datetime_op_from'].blank?
	datetime_from = Time.zone.parse(formValues['datetime_op_from'] + ' ' + (formValues['datetime_op_from_time'] || '00:00') + ':00')
end

if !formValues['datetime_op_to'].blank?
	datetime_to = Time.zone.parse(formValues['datetime_op_to'] + ' ' + (formValues['datetime_op_to_time'] || '23:59') + ':59')
end


items = HandlingItem.where('1=1')
items = items.where({handling_headers: {shipowner_id: formValues['shipowner_id']} }) unless formValues['shipowner_id'].blank?
items = items.where({handling_item_type: formValues['handling_item_type']}) unless formValues['handling_item_type'].blank?
items = items.where("datetime_op_end >= ?", datetime_from) unless formValues['datetime_op_from'].blank?
items = items.where("datetime_op_end <= ?", datetime_to) unless formValues['datetime_op_to'].blank?
items = items.where("operation_type = ?", 'AF')
items = items.where("datetime_op_end IS NOT NULL")


items = items.joins(:handling_header)
group_shipowner = items.group_by { |d| d.handling_header.shipowner_id }
%>


<%
 ######################################################
 #ShipOwner
 ###################################################### 
%>
<% group_shipowner.each do |so_id, so_val| %>
 <% so = Shipowner.find(so_id) %>

    <p class="bg-primary" style="padding: 10px"><%= so.name -%></p>
 

	<%
 	######################################################
 	#Nave/Viaggio fase di imbarco/sbarco
 	###################################################### 
	%>
 	<% group_op = so_val.group_by { |d|
 		### d.handling_item_type
 		 
 		#gestisco raggruppamento con un array
 		k = {:ship => nil, :voyage => nil} 		
 		k[:handling_type]	 = d.handling_header.handling_type
 		k[:is_import_export] = d.is_import_export()
		bk = d.search_booking 		
 		

		  if k[:handling_type] == 'TMOV'			 
			  if k[:is_import_export] == 'E'
			  	#Export: provo a recuperare nave/viaggio da booking
			  	  hi_O_LOAD = d.handling_header.get_O_LOAD			 			 
			  	  if !hi_O_LOAD.nil?
			  	    k[:ship] 	= hi_O_LOAD.ship.name.to_s
				    k[:voyage]	= hi_O_LOAD.voyage.to_s
			  	  else
				   if !bk.nil?
				    k[:ship] 	= "[#{bk.ship.name.to_s}]"
				    k[:voyage]	= "[#{bk.voyage.to_s}]"
				   end
				  end 
			  else
			     #Import: provo a recuperare nave/viaggio dal movimento di sbarco
			       hi_discharge = d.handling_header.get_I_DISCHARGE
			       if !hi_discharge.nil?
			  	    k[:ship] 	= hi_discharge.ship.name.to_s
			  	    k[:voyage] 	= hi_discharge.voyage.to_s
			  	   end
			  end
		   end  
		k

 		 
    } %>
	<% group_op.sort_by{|a| 
		[		
			a[0][:ship].to_s,
			a[0][:voyage].to_s,
			a[0][:handling_type],
			a[0][:is_import_export]
			
		]
	}.each do |op_id, op_val| %>

 		<p class="bg-success" style="padding: 5px 10px">
 			<b><%= t("handling_type.#{op_id[:handling_type]}.long") -%></b>
 			<% if op_id[:handling_type] == 'TMOV' %>
 			 <% out_fase_di = op_id[:is_import_export]=='I' ? 'SBARCO' : 'IMBARCO' %>
 			 <span>
 			 	Nave: <b><%= op_id[:ship]-%></b>, Viaggio: <b><%= op_id[:voyage] -%></b>, Fase di <b><%= out_fase_di -%></b>
 			 </span>
 			<% end %> 
 		</p>

		<%
 		######################################################
 		#Tipo operazioni
 		###################################################### 
		%>
		<table class="table table-striped table-bordered table-condensed medaT-report">
		 <tr>
		  <th width=70>Data/ora</th>
		  <th width=70>Disallaccio</th>
		  <th width=100>Giornate fatt.</th>
		  <th width=40>Tipo</th>
		  <th width=80>Container</th>
		 </tr>

		<% op_val.sort_by{|a| 
		
			if formValues['seq_ord'] == 'date_tipo'
				[a.datetime_op, a.handling_header.equipment.equipment_type]
			else
				[a.handling_header.equipment.equipment_type, a.datetime_op]
			end
		
		
			}.each do |row| %>
			<% eq = Equipment.find(row.handling_header.equipment_id) %>
			
			<%
			 out_ship 		= ""
			 out_voyage		= ""
			 out_booking 	= ""
			 
			 is_import_export = row.is_import_export()			 
			 bk = row.search_booking			 
			 
			 #nave/viaggio lo trovo in linea o eventualmente lo recupero dal booking
			 if !row.ship.nil? || !row.voyage.to_s.empty?
			  out_ship 		= row.ship.name.to_s unless row.ship.nil?
			  out_voyage 	= row.voyage.to_s 
			 else
			 
			  if is_import_export == 'E'
			  	#Export: provo a recuperare nave/viaggio da booking			 			 
				  if !bk.nil?
				   out_ship 	= "[#{bk.ship.name.to_s}]"
				   out_voyage	= "[#{bk.voyage.to_s}]"
				  end
			  else
			     #Import: provo a recuperare nave/viaggio dal movimento di sbarco
			       hi_discharge = row.search_hi_by_item_type('I_DISCHARGE')
			  	   out_ship = "[#{hi_discharge.ship.name.to_s}]" unless hi_discharge.nil?
			  	   out_voyage = "[#{hi_discharge.voyage.to_s}]" unless hi_discharge.nil?
			  end
			 end
			 
			 if !row.booking.nil?
			 	out_booking = row.booking.num_booking.to_s
			 else
			 	out_booking = "[#{bk.num_booking.to_s}]" if !bk.nil?
			 end
			  
			 
			 out_seal_ar = []
			 case is_import_export
			 	when "I"
			 		out_seal_ar << row.handling_header.seal_imp_shipowner.to_s unless row.handling_header.seal_imp_shipowner.to_s.blank?
			 		out_seal_ar << row.handling_header.seal_imp_others.to_s unless row.handling_header.seal_imp_others.to_s.blank?
			 		out_weight	= row.handling_header.weight_imp
			 	when "E"
			 		out_seal_ar << row.handling_header.seal_exp_shipowner.to_s unless row.handling_header.seal_exp_shipowner.to_s.blank?
			 		out_seal_ar << row.handling_header.seal_exp_others.to_s unless row.handling_header.seal_exp_others.to_s.blank?
			 		out_weight	= row.handling_header.weight_exp			 	
			 end  
			  
			 out_seal = out_seal_ar.join('/') 
			  
			  
			%>
			
			
						
 			<tr>
 				<td><%= row.datetime_op.strftime("%d/%m/%y %H:%M") -%></td>
 				<td><%= row.datetime_op_end.strftime("%d/%m/%y %H:%M") unless row.datetime_op_end.nil? -%></td>
 				<td><%= "#{(((((row.datetime_op_end - row.datetime_op).to_i / 3600).to_i + 1)/24).to_i + 1)}" unless row.datetime_op_end.nil? %></td>
				<td><%= eq.equipment_type -%></td>				
				<td><%= row.handling_header.container_number.to_s -%></td>
			</tr>
		<% end %>
		</table>


	<% end %>








 
<% end %>