{
 success: true,
 items: [
 {
  id: 'ship_prepares_gest_<%= @item.id -%>',
  xtype: 'container',
  closable: true,
  title: 'ShipGest',
  flex: 1,
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},


  items: [
  
	{
	  xtype: 'panel',
	  border: true,
	    layout: {
		    type: 'hbox',
		    pack: 'start',
		    align: 'stretch'
		},
	  bodyStyle: 'background-color: #e0e0e0;',
		
      defaults: {
      	style: 'margin: 10px; padding: 10px;'
      },
	
	  items: [
	  ]
	} //INTESTAZIONE
	

	//GRID ---
		, {
				flex: 1,
				layout: 'fit',
        	    title: '',
        	    xtype: 'gridpanel',
				autoScroll: true,  
				scroll: true,
								
        	    store: new Ext.data.Store({
        	    	autoLoad: true,
        	    	fields: [],
        	    	proxy: {
        	            url: <%= raw url_for(:action=>'get_gest_items').to_json -%>,
        	            extraParams: {        	            	
        	            	item_id: <%= @item.id -%>
        	            },
        	            reader: {
        	                type: 'json',
							method: 'POST',        	                
        	                rootProperty: 'items'
        	            },
        	            paramsAsJson: true,
						method: 'POST',
						type: 'ajax',
			
						//Add these two properties
						actionMethods: {
							read: 'POST'
						},        	            
        	            
        	        }
        	    }),
        	   
 		        	   
        	           	    
        	    
			    columns: [
			     {
			        text: 'Seq',
			        width: 40,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h5>' + (rowIndex + 1) + '</h5>';
			        }			        
			     }, {
			     	text: 'L/D',
			     	width:60,
			     	dataIndex: 'in_out_type',
			     	renderer: function(val){
						if (val == 'D') return '<i class="fa fa-download fa-3x" style="color:green;"></i>';
						if (val == 'L') return '<i class="fa fa-upload fa-3x" style="color:red;"></i>';			     	
			     	}
			     }, {
			     	text: 'Descrizione',
			     	flex: 1,
			     	renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			     	 if (rec.get('item_type') == 'LS'){
			     	    if (rec.data.import_header.import_type == 'L') imb_sba = 'Imbarco';
			     	    if (rec.data.import_header.import_type == 'D') imb_sba = 'Sbarco'
			         	ret = '<h3>Lista ' + imb_sba + ' [' + rec.data.import_header.handling_type + '] <br/>Viaggio: <b>' + rec.data.import_header.voyage + '</b></h3>';
			         	return ret;
			         }
			     	 if (rec.get('item_type') == 'OP'){
			         	ret = '<h3>' + rec.data.ship_prepare_op.name +'</h3>';
			         	return ret;
			         }	
			         	
			        }
			     }, {
			     	text: 'Note',
			     	flex: 1,
			     	dataIndex: 'notes',
			     	renderer: function(value) { return '<p>' + (value || "") +'</p>';}
			     }, {
			     	text: 'UM',
			     	width: 60,
			     	dataIndex: 'notes',
			     	renderer: function(value, metaData, rec) {
			     		if (Ext.isEmpty(rec.data.um)) return ""; 
			     		return '<p>' + (rec.data.um.code || "") +'</p>'; 
			     	}
			     }, {
			     	text: 'Qt&agrave;',
			     	width: 100, align: 'right',
			     	dataIndex: 'out_qty',
			     	renderer: function(value) { return '<h3>' + Ext.util.Format.number(value, "0,000") + '</h3>'; }
			     }, {
			     	text: 'Pesare?',
			     	width: 70,
			     	dataIndex: 'to_weigh',
			     	renderer: function(value, medaData, rec) {
			     		if (rec.get('to_weigh') == true)
			     			return '<p><i class="fa fa-balance-scale fa-2x" style="color:green;"></i></p>';
					}

			     }, {
			     	text: 'Sbarco/Imbarco',
			     	flex: 1,
			     	dataIndex: 'out_item_status',
			     	renderer: function(value) { return '<p>' + value +'</p>';}
			     }, {
			     	text: 'Ricarica Imb./Sba.',
			     	flex: 1,
			     	dataIndex: 'out_item_status_ric',
			     	renderer: function(value) { return '<p>' + value +'</p>';}
			     }
			     
			     
<% if 1==1 || params[:op] == 'MOVE' #muletto: spunta voce imbarcata/sbarcata %>			     
			     , {
			        text: '', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	var loc_grid = this;

			        	if (rec.get('item_type') != 'OP') return '';
			        	if (rec.get('to_weigh') == true) return '';
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            
			                ok_img = 'fa-check-circle';
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
								cls: 'btn-ok',
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
           								loc_form = Ext.create('Ext.form.Panel', {
											    title: '',
											    frame: true,
											    bodyPadding: 10,
											    defaultType: 'textfield',
											    	layout: {
													    type: 'vbox',
													    align : 'stretch',
													    pack  : 'start',
													},
											    items: [
											      {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},
											      {xtype: 'numberfield', name: 'qty', allowBlank: false, fieldLabel: 'Quantit&agrave;', fieldStyle: 'font-size: 32px; text-transform: uppercase;'},
											        
											      {xtype: 'hiddenfield', name: 'authenticity_token', value: '<%= form_authenticity_token %>'}											      
											      										    										    										    
											    ]
											    ,
								    			dockedItems: [{
												    xtype: 'toolbar',
												    dock: 'right',
												    width: 135,
													defaults: {
												        xtype: 'button', scale: 'medium', textAlign: 'left'
									                },			    
												    margin: '5 5 5 5',
											    
											     	items:
												        [{
												            text: '<br/>Imbarco / <br/>Sbarco<br/>&nbsp;',
												            scale: 'large', cls: 'btn-confirm',
												            handler: function (btn, evt) {
												                           
												             form = this.up('form').getForm();
												             tmp_win  = this.up('window');
												             if (form.isValid()) {
												                btn.disable();
												                
											                    form.submit({
											                        url: '<%= url_for(:controller=>'ship_prepares', :action=>'save_item_weight') -%>',
											                        waitMsg: 'Salvataggio in corso....',
											                        success: function(fp, o) {
																	      loc_grid.store.remove(rec);
																	      loc_grid.store.load();
																	      tmp_win.close();
											                        },
																	failure: function(fp, o) {
											                            //msg('Success', 'Processed file "' + o.result.file + '" on the server');
										                                Ext.Msg.alert('Import non eseguito. ', o.result.message);	                            
											                        }	                        
											                    });
											                    return false;
												             }
												            }
												          }, 
												          
														  {
												            text: '<br/>Ricarica<br/>&nbsp;',
												            scale: 'large', cls: 'btn-confirm',
												            handler: function (btn, evt) {
												                           
												             form = this.up('form').getForm();
												             tmp_win  = this.up('window');
												             if (form.isValid()) {
												                btn.disable();
												                
											                    form.submit({
											                        url: '<%= url_for(:controller=>'ship_prepares', :action=>'save_item_weight_ric') -%>',
											                        waitMsg: 'Salvataggio in corso....',
											                        success: function(fp, o) {
																	      loc_grid.store.remove(rec);
																	      loc_grid.store.load();
																	      tmp_win.close();
											                        },
																	failure: function(fp, o) {
											                            //msg('Success', 'Processed file "' + o.result.file + '" on the server');
										                                Ext.Msg.alert('Import non eseguito. ', o.result.message);	                            
											                        }	                        
											                    });
											                    return false;
												             }
												            }
												          },												          
												          
												          {
												            text: 'Chiudi',												            
												            scale: 'large',
												            handler: function (btn, evt) {
												            	tmp_win  = this.up('window');
												            	tmp_win.close();
												            }
												          }
												          
												         ]
	  												}]	  												   											   											
   														  												
											});		
											
				                           loc_win = Ext.create('Ext.window.Window',{
											    layout: 'fit',
											    items: loc_form,
											    title: 'Registra peso (MOVE)',
											    width: 500,
											    height: 350,
											    id: 'myWindow'
											}).show();
														                             
			                           	return false;
			                           								
			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }

			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }
<% end %>			     




<% if params[:op] == 'WEIGH' #peso %>			     
			     , {
			        text: '', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			        	var loc_grid = this;

			        	if (rec.get('item_type') != 'OP') return '';
			        	if (rec.get('to_weigh') != true) return '';
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            
			                ok_img = 'fa-truck';
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
								cls: 'btn-ok',
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
           								loc_form = Ext.create('Ext.form.Panel', {
											    title: '',
											    frame: true,
											    bodyPadding: 10,
											    defaultType: 'textfield',
											    	layout: {
													    type: 'vbox',
													    align : 'stretch',
													    pack  : 'start',
													},
											    items: [
											      {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},
											      {xtype: 'numberfield', name: 'qty', allowBlank: false, fieldLabel: 'Netto', fieldStyle: 'font-size: 32px; text-transform: uppercase;'},
											      
												  {xtype: 'numberfield', name: 'qty_tare', allowBlank: false, fieldLabel: 'Tara', fieldStyle: 'font-size: 20px; text-transform: uppercase;'},
												  {xtype: 'numberfield', name: 'qty_gross', allowBlank: false, fieldLabel: 'Lordo', fieldStyle: 'font-size: 20px; text-transform: uppercase;'},
											      
											      {xtype: 'textfield', name: 'plate', value: rec.get('plate'), fieldLabel: 'Targa'},
											        
											      {xtype: 'hiddenfield', name: 'authenticity_token', value: '<%= form_authenticity_token %>'}											      
											      										    										    										    
											    ]
											    ,
								    			dockedItems: [{
												    xtype: 'toolbar',
												    dock: 'right',
												    width: 135,
													defaults: {
												        xtype: 'button', scale: 'medium', textAlign: 'left'
									                },			    
												    margin: '5 5 5 5',
											    
											     	items:
												        [{
												            text: '<br/>Imbarco / <br/>Sbarco<br/>&nbsp;',
												            scale: 'large', cls: 'btn-confirm',
												            handler: function (btn, evt) {
												                           
												             form = this.up('form').getForm();
												             tmp_win  = this.up('window');
												             if (form.isValid()) {
												             
												             	if(form.findField('qty').getValue() + form.findField('qty_tare').getValue() != form.findField('qty_gross').getValue()){
												             		alert('Verificare la correttezza dei pesi inseriti');
												             		return false;
												             	}												             
												             
												                btn.disable();
												                
											                    form.submit({
											                        url: '<%= url_for(:controller=>'ship_prepares', :action=>'save_item_weight') -%>',
											                        waitMsg: 'Salvataggio in corso....',
											                        success: function(fp, o) {
																	      loc_grid.store.remove(rec);
																	      loc_grid.store.load();
																	      tmp_win.close();
											                        },
																	failure: function(fp, o) {
											                            //msg('Success', 'Processed file "' + o.result.file + '" on the server');
										                                Ext.Msg.alert('Import non eseguito. ', o.result.message);	                            
											                        }	                        
											                    });
											                    return false;
												             }
												            }
												          }, 
												          
												          
														  {
												            text: '<br/>Ricarica<br/>&nbsp;',
												            scale: 'large', cls: 'btn-confirm',
												            handler: function (btn, evt) {
												                           
												             form = this.up('form').getForm();
												             tmp_win  = this.up('window');
												             if (form.isValid()) {
												             
												             	if(form.findField('qty').getValue() + form.findField('qty_tare').getValue() != form.findField('qty_gross').getValue()){
												             		alert('Verificare la correttezza dei pesi inseriti');
												             		return false;
												             	}
												             
												                btn.disable();
												                
											                    form.submit({
											                        url: '<%= url_for(:controller=>'ship_prepares', :action=>'save_item_weight_ric') -%>',
											                        waitMsg: 'Salvataggio in corso....',
											                        success: function(fp, o) {
																	      loc_grid.store.remove(rec);
																	      loc_grid.store.load();
																	      tmp_win.close();
											                        },
																	failure: function(fp, o) {
											                            //msg('Success', 'Processed file "' + o.result.file + '" on the server');
										                                Ext.Msg.alert('Import non eseguito. ', o.result.message);	                            
											                        }	                        
											                    });
											                    return false;
												             }
												            }
												          },												          
												          
												          {
												            text: 'Chiudi',												            
												            scale: 'large',
												            handler: function (btn, evt) {
												            	tmp_win  = this.up('window');
												            	tmp_win.close();
												            }
												          }
												          
												         ]
	  												}]	  												   											   											
   														  												
											});		
											
				                           loc_win = Ext.create('Ext.window.Window',{
											    layout: 'fit',
											    items: loc_form,
											    title: 'Registra peso (WEIGH)',
											    width: 500,
											    height: 350,
											    id: 'myWindow'
											}).show();
														                             
			                           	return false;
			                           								
			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }
<% end %>			     


			     
			    ]
			    

			, dockedItems: [
			  {
			    xtype: 'toolbar',
			    dock: 'bottom',
			    width: 135,
				defaults: {
			        xtype: 'button', scale: 'medium', textAlign: 'left'
                },			    
			    margin: '40 10 10 10',
			    items: [
			    

<% if params[:op] == 'EDIT' %>			    			    
			    
			    	{text: 'Lista imbarco/sbarco', iconCls: 'fa fa-plus fa-2x', cls: 'btn-add', 
			    		handler: function(){

							m_grid = this.up('grid');

			    			//apro la form per una nuova riga di dettaglio
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										      {xtype: 'hiddenfield', name: 'item_id', value: <%= @item.id -%>},
										      {xtype: 'hiddenfield', name: 'item_type', value: 'LS'},
												<%= raw extjs_std_combo('import_header_id', @item.ship_prepare_items.new,
														:valueField => 'id',
														:displayField => 'combo_descr',
														:store => extjs_std_store_url(root_path + "ship_prepares/get_open_voyage_by_ship/#{@item.id}")) -%>
										      										    										    										    
										    ]
										    , 	buttons:
											        [
													{
											            text: 'Anche chiusi',
											            cls: 'btn',
											            handler: function (btn, evt) {
											            	form = this.up('form').getForm();
											            	form.findField('import_header_id').store.proxy.extraParams.anche_chiusi = true;
											            	form.findField('import_header_id').store.load();
											            }
											        },											        
											        
											        {
											            text: 'Aggiungi',
											            cls: 'btn-ok',
											            handler: function (btn, evt) {
											             btn.disable();
											                           
											             form = this.up('form').getForm();
											             tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'ship_prepares', :action=>'add_item_row') -%>',
															   jsonData: {
															   	data: form.getValues()
															   },
															   success: function(response, opts) {
															      // store.remove(rec);
															      m_grid.store.load();
															      tmp_win.close();
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
															   }
															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});


	                           loc_win = Ext.create('Ext.window.Window',{
								    layout: 'fit',
								    items: loc_form,
								    title: 'Abbina lista di imbarco/sbarco',
								    width: 500,
								    height: 300
								}).show();
			    			
			    		}
			    	},
			    	




			    	{text: 'Riga merce', iconCls: 'fa fa-plus fa-2x', cls: 'btn-add', 
			    		handler: function(){

							m_grid = this.up('grid');

			    			//apro la form per una nuova riga di dettaglio
			                           loc_form = Ext.create('Ext.form.Panel', {
										    title: '',
										    bodyPadding: 10,
										    defaultType: 'textfield',
										    	layout: {
												    type: 'vbox',
												    align : 'stretch',
												    pack  : 'start',
												},
										    items: [
										      {xtype: 'hiddenfield', name: 'item_id', value: <%= @item.id -%>}
										      , {xtype: 'hiddenfield', name: 'item_type', value: 'OP'}
										      
											  , <%= raw extjs_std_combo('in_out_type', @item.ship_prepare_items.new,
												    	{
												    		:fieldLabel=>'Imbarco/Sbarco',
												    		:store => extjs_std_store_data(HandlingItem.new.load_dischage_get_data_json), :allowBlank=>false
												    	}) -%>									      
										      
										      , <%= raw extjs_std_combo_model('ship_prepare_op', @item.ship_prepare_items.new, {:fieldLabel=>'Merce'}) -%>
										      , <%= raw extjs_std_combo_model('um', @item.ship_prepare_items.new) -%>
										      , <%= raw extjs_std_numberfield('qty', @item.ship_prepare_items.new) -%>
										      , <%= raw extjs_std_booleanfield('to_weigh', @item.ship_prepare_items.new, {:fieldLabel=>'Da pesare'}) -%>
										      , <%= raw extjs_std_textareafield('notes', @item.ship_prepare_items.new) -%>
										    ]
										    , 	buttons:
											        [{
											            text: 'Aggiungi',
											            cls: 'btn-ok',
											            handler: function (btn, evt) {
											             btn.disable();
											                           
											             form = this.up('form').getForm();
											             tmp_win  = this.up('window');
											             if (form.isValid()) {
															Ext.Ajax.request({
															   method: 'POST',
															   url: '<%= url_for(:controller=>'ship_prepares', :action=>'add_item_row') -%>',
															   jsonData: {
															   	data: form.getValues()
															   },
															   success: function(response, opts) {
															      // store.remove(rec);
															      m_grid.store.load();
															      tmp_win.close();
															   },
															   failure: function(response, opts) {
															      console.log('server-side failure with status code ' + response.status);
															   }
															});	
														  return false;												             
											             }
											            }
											          }
											         ]
  
										});


	                           loc_win = Ext.create('Ext.window.Window',{
								    layout: 'fit',
								    items: loc_form,
								    title: 'Nuova riga imbarco/sbarco merce',
								    width: 500,
								    height: 300
								}).show();
			    			
			    		}
			    	},


<% end %>
			    	
			    	
			    	
			    	{xtype: 'tbfill'},

			    	{text: 'Rendiconto', iconCls: 'fa fa-print fa-2x', cls: 'btn-ok', 
			    		handler: function(){
							acs_show_win_std('Modifica', <%= raw url_for(:controller=>'ship_prepares', 
							 	 			  :action=>'r_rendiconto_parameters').to_json -%>,
									     	  {rec_id: <%= @item.id -%>}, 800, 400);				    					    			
			    		}
			    	},
			    	
			    	{text: 'Refresh', iconCls: 'fa fa-refresh fa-2x', cls: 'btn-close', 
			    		handler: function(){
				    		this.up('grid').store.load();			    			
			    		}
			    	} 
			    	
			    ]
			  }
			 ]
			 
			 
			 
			 
			  ,  listeners: {
			  
			  
			  
					    celldblclick: function(gridView,htmlElement,columnIndex,rec){
					    	column_name = gridView.getGridColumns()[columnIndex].dataIndex
					        if (column_name == 'out_item_status') { //doppio click sul num_container... apro il movimento aperto
							  acs_show_win_std('Dettaglio', <%= raw url_for(:controller=>'ship_prepares', :action=>'weigh_details').to_json -%>,
				     	 			{type: 'STD', rec_id: rec.get('id')}, 600, 400);	    
					        }
					        if (column_name == 'out_item_status_ric') { //doppio click sul num_container... apro il movimento aperto
							  acs_show_win_std('Dettaglio', <%= raw url_for(:controller=>'ship_prepares', :action=>'weigh_details').to_json -%>,
				     	 			{type: 'RIC', rec_id: rec.get('id')}, 600, 400);	    
					        }
					        
					    },
			  
			  
			  
	                	itemcontextmenu : function(item, record, index, e, eOpts){
	                		eOpts.stopEvent();
                            var xy = eOpts.getXY();	                	
                            new Ext.menu.Menu({
                                items : [
                                
                                
                                         {
                                            text : '<i class="fa fa-edit fa-1x"> Modifica</i>',                                                                                                        
                                            handler: function(){
                                            	
                                            	if (record.get('item_type') == 'OP')
									     	 		new_win = acs_show_win_std('Modifica', <%= raw url_for(:controller=>'ship_prepares', 
									     	 				:action=>'modify_record_item').to_json -%>,
									     	 				{rec_id: record.get('id'), from_grid_id: this.id}, 800, 400);
									     	 	else
									     	 		Ext.Msg.alert('Opeazione non ammessa', '');										                                                    
                                            }, scope: this
                                          }
                                          
<% if User.current.admin_can?(:ship_prepare, :gest) %>                                          
                                          , {
                                            text : '<i class="fa fa-trash-o fa-1x"> Elimina</i>',                                                                                                        
                                            handler: function(){
                                            
                                            	tmp_grid = this;									     	 	

												Ext.MessageBox.confirm('Richieta conferma', 'Eliminare l\'attivit&agrave; corrente?', function(btn){
												
													if(btn === 'yes'){
													
														Ext.Ajax.request({
										                    url: <%= raw url_for(:controller=>'ship_prepares', :action=>'exe_delete_item_record').to_json -%>,
										                    waitMsg: 'Eliminazione in corso....',
															method:'POST',                     
										                    jsonData: {rec_id: record.get('id')},	
										             	
															success: function(result, request) {
																	var returnData = Ext.JSON.decode(result.responseText);
																	if (returnData.success == false){
																		Ext.MessageBox.show({
													                        title: 'EXCEPTION',
													                        msg: returnData.message,
													                        icon: Ext.MessageBox.ERROR,
													                        buttons: Ext.Msg.OK
												                    	})
												                      return false;										
																	}																							
															
																tmp_grid.store.load();																						 						
															}, scope: this,
															
															failure: function(rec, op) {
																var result = Ext.JSON.decode(op.getResponse().responseText);
																Ext.MessageBox.show({
											                        title: 'EXCEPTION',
											                        msg: result.message,
											                        icon: Ext.MessageBox.ERROR,
											                        buttons: Ext.Msg.OK
										                    	})					
															}, scope: this,						
																			 
												    	});													
													
													} //yes
													
												}); //confirm


										                                                    
                                            }, scope: this
                                          }
<% end %>                                          
                                          
                                          
                                         ]
                               }).showAt(xy);
	                	
	                	}			    					    
					}			 
			 


                        	    
        	}     	
	//--- GRID
     
  
  ]
 }
 ]
}