{
 success: true,
 items: [
 {
  xtype: 'container',
  closable: true,
  title: <%= raw "Pesate [#{filtered_type}]".to_json -%>,
    layout: {
	    type: 'vbox',
	    pack: 'start',
	    align: 'stretch'
	},  	

  items: [
       
   // grid con righe import
		 {
				flex: 1,
				layout: 'fit',
        	    tools: [
                ],
        	    xtype: 'gridpanel',
				autoScroll: true,  
				scroll: true,      	    
        	    store: new Ext.data.Store({
        	    	autoLoad: true,
        	    	fields: [],
        	    	proxy: {
        	            url: <%= raw  (root_path + 'weighs/get_row_by_filtered_type').to_json -%>,
        	            extraParams: {
        	            	filtered_type: <%= raw filtered_type.to_json -%>,
        	            	form_user: {}
        	            },
        	            reader: {
        	                type: 'json',
							method: 'POST',        	                
        	                rootProperty: 'items'
        	            },
        	            paramsAsJson: true,
						method: 'POST',
						type: 'ajax',
			
						//Add these two properties
						actionMethods: {
							read: 'POST'
						},        	            
        	            
        	        }
        	    }),
        	   
 		        	   
        	           	   
        	   dockedItems: [
        	   { 
        	    xtype: 'toolbar', dock: 'top', itemId: 'toptoolbar',
        	    items: [
        	    '->', {
				    xtype: 'form',	
				    height: 50,
				    layout: {
					    type: 'hbox',
					    pack: 'start',
					    align: 'stretch'
					},
				    padding: '10 10 10 10',
				    
				    defaults: {
				    	xtype: 'textfield',
				    	labelAlign: 'right',
				    	width: 150, labelWidth: 70, padding: '0 0 0 10',
				    	fieldStyle: 'font-size: 16px; text-transform: uppercase;',
		                enableKeyEvents: true,
		                listeners: {                   
			                'keypress': function(field,event){
			                    if (event.getKey() == event.ENTER){
			                        this.up('form').start_refresh();
			                    }
			                }                                   
			            }
			        },
			        
			        start_refresh: function() {
			                    header_form = this.up('grid').getDockedComponent('toptoolbar').down('form').getForm();
			                    header_form_values = header_form.getValues();

				    			this.up('grid').store.proxy.extraParams.form_user = header_form_values;				 				 
				 				this.up('grid').getStore().load();			        
			        },

				    items: [
						{									
								xtype: 'label', width: 100, labelWidth: 120, padding: '0 0 0 10',
				                text: 'Ricerca per: '
				 		}, {	
								width: 200, labelWidth: 120, padding: '0 0 0 10',
				                fieldLabel: 'Container', name: 'flt_num_container'
				 		}, {	
				                fieldLabel: 'Autista', name: 'flt_driver'
				 		}, {	
				                fieldLabel: 'Targa', name: 'flt_plate'
				 		}, {	
				                fieldLabel: 'Rimorchio', name: 'flt_plate_trailer'
				 		}
				    ]
				 }
				 
				 ,  {iconCls: 'fa fa-refresh fa-2x', text: 'Refresh', scale: 'large', 
				 			handler: function(event, toolEl, panel){ 
				 
			                    header_form = this.up('grid').getDockedComponent('toptoolbar').down('form').getForm();
			                    header_form_values = header_form.getValues();

				    			this.up('grid').store.proxy.extraParams.form_user = header_form_values;				 				 
				 				this.up('grid').getStore().load();
				 			}
				 	}
				 ]
			  }
			],
        	           	    
        	    
			    columns: [{
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.damageds.sequence').to_json -%>,
			        width: 50,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         return '<h5>' + (rowIndex + 1) + '</h5>';
			        }			        
			    }, {
			        dataIndex: 'terminal_id',
			        text: 'Terminal',
			        width: 100,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '<h1>' + rec.get('terminal').code + '</h1>';
			          return ret;			         
			        }			        
			    }, {
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.damageds.container').to_json -%>,
			        width: 220,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '<h1>' + rec.get('container_number') + '</h1>';
			          return ret;			         
			        }			        
			    }
			    
			    
			    , {
			        dataIndex: 'container_number',
			        text: <%= raw t('forms.to_be_handled.details').to_json -%>,
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			         
			         
			         if (Ext.isEmpty(rec.get('plate')))
			          out_plate = '';
			         else
			          out_plate = '[' + rec.get('plate') + ']';
			          
			         ret = '';
			         ret += '<table class=import_item_detail>';
			         ret += '<tr><th>Autista</th><td>' + rec.get('driver') + '</td></tr>';
			         ret += '<tr><th>Targa</th><td>' + rec.get('plate') + '</td></tr>';
			         ret += '<tr><th>Targa rimorchio</th><td>' + rec.get('plate_trailer') + '</td></tr>';
			         ret += '</table>';
			         return ret;
			        }
			    }, {
			        text: 'Data',
			        flex: 1,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {
			         ret = '';
			         ret += '<table class=import_item_detail>';			         
					 ret += '<tr><th>Registrato il</th><td>' + Ext.util.Format.date(rec.get('created_at'), 'd-m-Y H:i') + '</td></tr>';			         
					 ret += '<tr><th>Pesato il</th><td>' + Ext.util.Format.date(rec.get('weighed_at'), 'd-m-Y H:i') + '</td></tr>';
			         ret += '</table>';
			         return ret;
			         
			        }			        	        
			    }			        	        



<% if User.current.admin_can?(:weigh, :ins_weigh) %>			    
				, {
			        text: 'Registra peso', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			        			        			        
			        	var loc_grid = this;
			        	
			        	if (rec.get('weigh_status') == 'CLOSE') return '';
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            			          
			                ok_img = 'fa-truck';
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa ' + ok_img + ' fa-3x"></i>',
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        
			                        	//disabilito per prevenire doppia esecuizione
			                        	button.disable();
				                			                             
			                           header_form = loc_grid.getDockedComponent('toptoolbar').down('form').getForm();
			                           header_form_values = header_form.getValues();
			                             
           								loc_form = Ext.create('Ext.form.Panel', {
											    title: '',
											    frame: true,
											    bodyPadding: 10,
											    defaultType: 'textfield',
											    	layout: {
													    type: 'vbox',
													    align : 'stretch',
													    pack  : 'start',
													},
											    items: [
											      {xtype: 'hiddenfield', name: 'rec_id', value: rec.get('id')},
											      {xtype: 'hiddenfield', name: 'type', value: rec.get('type')},
											      {xtype: 'numberfield', name: 'weight', allowBlank: false, fieldLabel: 'Peso', fieldStyle: 'font-size: 32px; text-transform: uppercase;'},
								 					{
											            xtype: 'filefield',
											            allowBlank: false,
											            emptyText: 'Seleziona file scansione cedolino',
											            fieldLabel: 'File',
											            name: 'file',
											            buttonText: '',
											            buttonConfig: {
											                iconCls: 'upload-icon'
											            }
											        },
											        
											        {xtype: 'textfield', name: 'driver', value: rec.get('driver'), fieldLabel: 'Autista'},
											        {xtype: 'textfield', name: 'plate', value: rec.get('plate'), fieldLabel: 'Targa'},
											        {xtype: 'textfield', name: 'plate_trailer', value: rec.get('plate_trailer'), fieldLabel: 'Targa rimorchio'},
											        
											        {xtype: 'hiddenfield', name: 'authenticity_token', value: '<%= form_authenticity_token %>'}											      
											      										    										    										    
											    ]
											    ,
								    			dockedItems: [{
												    xtype: 'toolbar',
												    dock: 'right',
												    width: 135,
													defaults: {
												        xtype: 'button', scale: 'medium', textAlign: 'left'
									                },			    
												    margin: '5 5 5 5',
											    
											     	items:
												        [{
												            text: 'Conferma',
												            scale: 'large', cls: 'btn-confirm',
												            handler: function (btn, evt) {
												                           
												             form = this.up('form').getForm();
												             tmp_win  = this.up('window');
												             if (form.isValid()) {
												                btn.disable();
												                
											                    form.submit({
											                        url: '<%= url_for(:action=>'save_weight') -%>',
											                        waitMsg: 'Salvataggio in corso....',
											                        success: function(fp, o) {
																	      loc_grid.store.remove(rec);
																	      loc_grid.store.load();
																	      tmp_win.close();											                            
											                        },
																	failure: function(fp, o) {
											                            //msg('Success', 'Processed file "' + o.result.file + '" on the server');
										                                Ext.Msg.alert('Import non eseguito. ', o.result.message);
											                            console.log('Failure!');	                            
											                        }	                        
											                    });
											                    return false;
												             }
												            }
												          }, 
												          
												          {
												            text: 'Chiudi',												            
												            scale: 'large',
												            handler: function (btn, evt) {
												            	tmp_win  = this.up('window');
												            	tmp_win.close();
												            }
												          }
												          
												         ]
	  												}]
											});		
											
				                           loc_win = Ext.create('Ext.window.Window',{
											    layout: 'fit',
											    items: loc_form,
											    title: 'Registra peso',
											    width: 500,
											    height: 300,
											    id: 'myWindow'
											}).show();
														                             
			                           	return false;

			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }
<% end %>


		// -------------------------------- view image cedolino ---------------------------------
				, {
			        text: 'Visualizza', width: 100, hidden: false, sortable: false,
			        renderer: function(value, metaData, rec, rowIndex, colIndex, store) {			        			        			        
			        	var loc_grid = this;
			        	
			        	if (rec.get('weigh_status') != 'CLOSE') return '';
			        	
			            var id = Ext.id();
			            setTimeout(function() {
			            
			                var buttonOK = Ext.create('Ext.button.Button', {
			                	
								text: '<i class="fa fa-search fa-3x"></i>',
		                		scale: 'large',			                    
			                        handler: function(button, b, c, d, e) {
			                        				
						     	 	new_win = acs_show_win_std('Cedolino', <%= raw url_for(:controller=>'weighs', :action=>'view_scan_file').to_json -%>,
						     	 		{rec_id: rec.get('id')}, 800, 400);										
			                        				
			                        														                             
			                           	return false;
			                        }, scope: rec

			                });
			                
			                if (Ext.get(id)) {
			                    buttonOK.render(Ext.get(id));
			                }
			            }, 1);
			            return '<div id="' + id + '"></div>';
			        }
			     }
		


			    
			    
			    
			          
        ], //columns
			    
			    
				get_cls_button(rec){				
		        	cls_button = 'btn-warning';
		        	if (Ext.isEmpty(rec.get('estimate_authorized_at')) == false)
		        		cls_button = 'btn-ok';				
				
					return cls_button;
				},
			    
			    listeners: {
					    celldblclick: function(gridView,htmlElement,columnIndex,rec){
					        if (columnIndex == 1) { //doppio click sul num_container... apro il movimento aperto
							  //rec.get('id') e' id di RepairHandlingItem
							  acs_show_panel_std(myApp, '<%= url_for(:controller=>'repair_handling_items', :action=>'rhi_edit') -%>', {rec_id: rec.get('id')}, 'Modifica');	    
					        }
					    }
					}

				    

                        	    
        	}    
   
   
   
  ]
 }
 ]
}